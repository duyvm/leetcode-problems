{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPeHeptQWTJqBkL+jRJWRuw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1079. Letter Tile Possibilities\n","\n","https://leetcode.com/problems/letter-tile-possibilities/description/\n","\n","You have `n`  tiles, where each tile has one letter `tiles[i]` printed on it.\n","\n","Return the number of possible non-empty sequences of letters you can make using the letters printed on those `tiles`.\n","\n","**Constraints:**\n","- `1 <= tiles.length <= 7`\n","- `tiles` consists of uppercase English letters."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input: `tiles = \"AAB\"`\n","\n","- Output: `8`\n","\n","- Explanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\"..\n","\n","**Example 2:**\n","\n","- Input: `tiles = \"AAABBC\"`\n","\n","- Output: `188`\n","\n","**Example 3:**\n","\n","- Input: `tiles = \"v\"`\n","\n","- Output: `1`"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"tiles\": \"AAB\",\n","        },\n","        \"output\": 8\n","    },\n","    {\n","        \"input\": {\n","            \"tiles\": \"AAABBC\",\n","        },\n","        \"output\": 188\n","    },\n","    {\n","        \"input\": {\n","            \"tiles\": \"V\",\n","        },\n","        \"output\": 1\n","    },\n","    {\n","        \"input\": {\n","            \"tiles\": \"AAAA\",\n","        },\n","        \"output\": 4\n","    },\n","    {\n","        \"input\": {\n","            \"tiles\": \"AACC\",\n","        },\n","        \"output\": 18\n","    },\n","]"],"metadata":{"id":"VD9YirfAdayx","executionInfo":{"status":"ok","timestamp":1739808663246,"user_tz":-420,"elapsed":325,"user":{"displayName":"Duy V천 Minh","userId":"02029714770423543928"}}},"execution_count":37,"outputs":[]},{"cell_type":"markdown","source":["### Observations\n","\n","- At each length `1 <= i <= tiles.length`, get all posible non-empty sequences\n","\n","- A value can be reappear\n","\n","- Same sequence can appear more than once\n","\n","### Intuition\n","\n","- Let `n = tiles.length`\n","\n","- Let `num_of_sequences[i]` array stores number of all posible non-empty sequences with lenght `i+1`\n","\n","- At each length `1 <= i <= n`\n","\n"," - if `i==1`: `num_of_sequences[i-1] = n`\n","\n"," - else `num_of_sequences[i-1] = num_of_sequences[i-2] * n - i + 1`\n","\n","- Return sum of `num_of_sequences`"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","from heapq import heapify, heappush, heappop\n","from queue import PriorityQueue\n","\n","class Solution:\n","    def numTilePossibilities(self, tiles: str, logging=False) -> int:\n","        self.logging = logging\n","\n","        n = len(tiles)\n","        num_of_sequences = [0] * n\n","        num_of_sequences[0] = n\n","\n","        duplicated_char_count = self.findDuplicatedCharCount(tiles)\n","\n","        if self.logging:\n","            print(f\"tiles: {tiles}, duplicated_char_count: {duplicated_char_count}\")\n","\n","        sum = self.deduplicatedSameSequences(duplicated_char_count, num_of_sequences[0], n, 1)\n","\n","        for i in range(2, n + 1):\n","            num_of_sequences[i-1] = num_of_sequences[i-2] * (n - i + 1)\n","            if self.logging:\n","                print(f\"num_of_sequences[{i-1}]: {num_of_sequences[i-1]}\")\n","            sum += self.deduplicatedSameSequences(duplicated_char_count, num_of_sequences[i-1], n, i)\n","\n","        return sum\n","\n","    def findDuplicatedCharCount(self, tiles: str):\n","        frequency = defaultdict(int)\n","        for _c in tiles:\n","            frequency[_c] += 1\n","\n","        duplicated_char_count = 0\n","\n","        for k, v in frequency.items():\n","            if v > 1:\n","                duplicated_char_count += v - 1\n","\n","        return duplicated_char_count\n","\n","\n","    def deduplicatedSameSequences(self, duplicated_char_count, max_num_of_sequences, total_char, target_length) -> int:\n","\n","        result = max_num_of_sequences\n","\n","        if self.logging:\n","            print(f\"duplicated_char_count: {duplicated_char_count}, max_num_of_sequences: {max_num_of_sequences}, total_char: {total_char}, target_length: {target_length}\")\n","            print(f\"result original: {result}\")\n","\n","        for i in range(0, target_length):\n","\n","            _duplicated_char_count = duplicated_char_count - i\n","            if _duplicated_char_count < 0:\n","                break\n","            result = result - (result//(total_char-i)) * _duplicated_char_count\n","\n","            if self.logging:\n","                print(f\"i: {i}, _duplicated_char_count: {_duplicated_char_count}, result: {result}\")\n","\n","        if self.logging:\n","            print(f\"result: {result}\")\n","        return result"],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1739809379696,"user_tz":-420,"elapsed":350,"user":{"displayName":"Duy V천 Minh","userId":"02029714770423543928"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.numTilePossibilities(test_case[\"input\"][\"tiles\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"ok","timestamp":1739809380234,"user_tz":-420,"elapsed":3,"user":{"displayName":"Duy V천 Minh","userId":"02029714770423543928"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"db8e245b-73e6-473b-94f5-7a24504815cd"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["Failed test case with input: {'tiles': 'AAB'} and output: 8 vs result: 10\n","Failed test case with input: {'tiles': 'AAABBC'} and output: 188 vs result: 444\n","Failed test case with input: {'tiles': 'AACC'} and output: 18 vs result: 22\n"]}]},{"cell_type":"code","source":["solution = Solution()\n","test_case = 4\n","\n","\n","result = solution.numTilePossibilities(test_cases[test_case][\"input\"][\"tiles\"], True)\n","if result != test_cases[test_case][\"output\"]:\n","    print(f'Failed test case with input: {test_cases[test_case][\"input\"]} and output: {test_cases[test_case][\"output\"]} vs result: {result}')"],"metadata":{"id":"OXlb9FlT1dfy","executionInfo":{"status":"ok","timestamp":1739808938033,"user_tz":-420,"elapsed":329,"user":{"displayName":"Duy V천 Minh","userId":"02029714770423543928"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"88f4fcd9-405f-4c3c-9c63-073a0bb8bba0"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["tiles: AACC, duplicated_char_count: 2\n","duplicated_char_count: 2, max_num_of_sequences: 4, total_char: 4, target_length: 1\n","result original: 4\n","i: 0, _duplicated_char_count: 2, result: 2\n","result: 2\n","num_of_sequences[1]: 12\n","duplicated_char_count: 2, max_num_of_sequences: 12, total_char: 4, target_length: 2\n","result original: 12\n","i: 0, _duplicated_char_count: 2, result: 6\n","i: 1, _duplicated_char_count: 1, result: 4\n","result: 4\n","num_of_sequences[2]: 24\n","duplicated_char_count: 2, max_num_of_sequences: 24, total_char: 4, target_length: 3\n","result original: 24\n","i: 0, _duplicated_char_count: 2, result: 12\n","i: 1, _duplicated_char_count: 1, result: 8\n","i: 2, _duplicated_char_count: 0, result: 8\n","result: 8\n","num_of_sequences[3]: 24\n","duplicated_char_count: 2, max_num_of_sequences: 24, total_char: 4, target_length: 4\n","result original: 24\n","i: 0, _duplicated_char_count: 2, result: 12\n","i: 1, _duplicated_char_count: 1, result: 8\n","i: 2, _duplicated_char_count: 0, result: 8\n","result: 8\n","Failed test case with input: {'tiles': 'AACC'} and output: 18 vs result: 22\n"]}]},{"cell_type":"code","source":["from os import access\n","from urllib.request import AbstractBasicAuthHandler\n","aab\n","\n","aa\n","ab\n","aa\n","ab\n","ba\n","ba\n","\n","remove one duplicate\n","remove one set duplicate\n","\n","aab\n","abc\n","baa\n","\n","\n","4*3*2*1=24\n","\n","=> 4 set = 24/4=6\n","\n","=> remove 2 set = 12\n","\n","=> in each set continue remove two smaller set\n","\n","=> 12/2 = 6\n","\n","\n","\n","aacc\n","aacc\n","acac\n","acca\n","acac\n","acca\n","\n","24\n","\n","aaaa\n","\n","24/n\n","24 - 24/n * num duplicate pair = 6\n","6 - 6/(n-1) * num duplicate pair-1 = 2\n","2 - 2/(n-2) * num duplicate pair-2 = 1\n","\n","-> final answer 1\n","\n","aab\n","6/3\n","total_set = 3\n","permutation each set = 6/3\n","\n","duplicate_set = 1\n","\n","-> valid set = 6/2\n","\n","6 - 6/3 * 1 = 4\n","\n","\n","2 - 2/2 * 1 = 1\n","\n","\n","aab\n","aba\n","\n","aab\n","aba\n","\n","baa\n","baa\n","\n","4/n=1\n","\n","4 - (4/4 * 3) = 1\n","\n","case 2 (12)\n","\n","12/4 = 3\n","\n","12 - (12/4*3) = 3\n","3 - 3/3 * 2 = 1\n","\n","\n","aacc\n","num_duplicate_pair = 2\n","\n","case 1\n","4/4\n","4 - 4/4 * 2 = 2\n","\n","case 2\n","12/4\n","12 - 12/4 * 2 = 6\n","6 - 6/3 * 1 = 4\n","\n","case 3\n","\n","24/4\n","24 - 24/4 * 2 = 12\n","12 - 12/3 * 1 = 8\n","8 - /2 * 0 = 8\n","\n","total_set = 4\n","permutation_each_set = n/total_set = 6\n","duplicate = 2\n","-> un duplicate set = 2\n","\n","6 - 6/2 * 1 = 3 + 3\n","\n","aac\n","aca\n","cac\n","cca\n","caa\n","acc\n","\n","\n","aaaa\n","total_set = 4\n","permutation_each_set = n/total_set = 6\n","duplicate = 3\n","-> un duplicate set = 1\n","\n","6 - 6/3 * 2 = 2\n","2 - 2/2*1 = 1\n","1 - 1/1*0=0\n","\n","\n","aaccc\n","n = 5\n","dup = 3\n","\n","total_per 5*4*3 = 60\n","set = 5\n","per per set = 60/5 = 12\n","\n","dup = 3\n","undup = 2\n","-> 2 un dup = 24\n","for each undup:\n","    for lenght - 1\n","        per = 12 - 12/4 * 3 = 3\n","        per = 3 - 3/3 * 2 = 1\n","\n","-> anser 12 + 1 + 1 = 14\n","\n","aac\n","aca\n","acc\n","\n","ccc\n","caa\n","cac\n","cca"],"metadata":{"id":"OZe4-Q7LPVmv"},"execution_count":null,"outputs":[]}]}