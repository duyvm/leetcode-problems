{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM4fRFhaWM1o+gbphuFAK12"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 2658. Maximum Number of Fish in a Grid\n","\n","https://leetcode.com/problems/maximum-number-of-fish-in-a-grid/description/\n","\n","\n","You are given a **0-indexed** 2D matrix `grid` of size `m x n`, where `(r, c)` represents:\n","\n","- A land cell if `grid[r][c] = 0`, or\n","- A water cell containing `grid[r][c]` fish, if `grid[r][c] > 0`.\n","\n","A fisher can start at any water cell `(r, c)` and can do the following operations any number of times:\n","\n","- Catch all the fish at cell `(r, c)`, or\n","- Move to any adjacent water cell.\n","\n","Return the **maximum** number of fish the fisher can catch if he chooses his starting cell optimally, or `0` if no water cell exists.\n","\n","An adjacent cell of the cell `(r, c)`, is one of the cells `(r, c + 1)`, `(r, c - 1)`, `(r + 1, c)` or `(r - 1, c)` if it exists.\n","\n","**Constraints:**\n","- `m == grid.length`\n","- `n == grid[i].length`\n","- `1 <= m, n <= 10`\n","- `0 <= grid[i][j] <= 10`"],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","![grid1](https://drive.google.com/uc?id=1iLY1pIaqhh5RAdDzSQEwxfFm4EH49gvO)\n","\n","- Input: `grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]`\n","- Output: `7`\n","- Explanation: The fisher can start at cell `(1,3)` and collect 3 fish, then move to cell `(2,3)` and collect 4 fish.\n","\n","**Example 2:**\n","\n","![grid2](https://drive.google.com/uc?id=16S5EyH-cT-igHbo5R6aqdvWsFbSGqUFf)\n","\n","- Input: `grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]`\n","- Output: `1`\n","- Explanation: The fisher can start at cells `(0,0)` or `(3,3)` and collect a single fish."],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"markdown","source":["## Observations\n","\n","- Graph problem:\n"," - Each water cell is a node with value `grid[r][c]`. If two water nodes `a` and `b` are adjacent, then there is edge between them.\n"," - A connected component is an area where all the nodes are connected.\n"," - The problem is to find the connected component that sum of all its nodes are largest.\n","- Use BFS and a FIFO queue to find connected cells compute sum value\n","\n"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"grid\": [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]\n","        },\n","        \"output\": 7\n","    },\n","    {\n","        \"input\": {\n","            \"grid\": [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]],\n","        },\n","        \"output\": 1\n","    },\n","    {\n","        \"input\": {\n","            \"grid\": [[0,5],[8,4]],\n","        },\n","        \"output\": 17\n","    },\n","    {\n","        \"input\": {\n","            \"grid\": [[8,6],[2,6]],\n","        },\n","        \"output\": 22\n","    },\n","    {\n","        \"input\": {\n","            \"grid\": [[1,0,0,10],[3,4,0,0]],\n","        },\n","        \"output\": 10\n","    },\n","]"],"metadata":{"id":"wNzMYBytDXO7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","\n","class Solution:\n","    def findMaxFish(self, grid: List[List[int]]) -> int:\n","\n","        m, n = len(grid), len(grid[0])\n","\n","        processed_cell = set()\n","\n","        q = deque()\n","\n","        max_fish = 0\n","\n","        for i in range(m):\n","            for j in range(n):\n","                #print(f\"r,c: {i},{j}\" )\n","                #print(f\"max_fish: {max_fish}\")\n","                if grid[i][j] == 0 or (i, j) in processed_cell:\n","                    continue\n","\n","                q.append((i, j))\n","                current_fish = 0\n","                while q:\n","                    #print(f\"processed_cell: {processed_cell}\")\n","                    #print(f\"deque: {q}\")\n","                    #print(f\"current_fish: {current_fish}\")\n","                    r, c = q.pop()\n","\n","                    if (r, c) in processed_cell:\n","                        continue\n","\n","                    current_fish += grid[r][c]\n","\n","                    if r-1 >= 0 and grid[r-1][c] > 0:\n","                        q.appendleft((r-1,c))\n","\n","                    if r+1 < m and grid[r+1][c] > 0:\n","                        q.appendleft((r+1,c))\n","\n","                    if c-1 >= 0 and grid[r][c-1] > 0:\n","                        q.appendleft((r,c-1))\n","\n","                    if c+1 < n and grid[r][c+1] > 0:\n","                        q.appendleft((r,c+1))\n","\n","                    processed_cell.add((r, c))\n","\n","                max_fish = max(max_fish, current_fish)\n","\n","        return max_fish"],"metadata":{"id":"7N6VBRdIDUwD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.findMaxFish(test_case[\"input\"][\"grid\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ptz87InoLH62"},"execution_count":null,"outputs":[]}]}