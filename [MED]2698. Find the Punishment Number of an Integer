{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMpNwSoL7krlAaOWVfZN9QB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 2698. Find the Punishment Number of an Integer\n","\n","https://leetcode.com/problems/find-the-punishment-number-of-an-integer/description/\n","\n","Given a positive integer `n`, return the **punishment number** of `n`.\n","\n","The **punishment number** of `n` is defined as the sum of the squares of all integers `i` such that:\n","\n","- `1 <= i <= n`\n","- The decimal representation of `i * i` can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals `i`.\n","\n","**Constraints:**\n","- `1 <= n <= 1000`"],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input: `n=10`\n","\n","- Output: `182`\n","\n","- Explanation:\n","\n","        There are exactly 3 integers i in the range [1, 10] that satisfy the conditions in the statement:\n","        - 1 since 1 * 1 = 1\n","        - 9 since 9 * 9 = 81 and 81 can be partitioned into 8 and 1 with a sum equal to 8 + 1 == 9.\n","        - 10 since 10 * 10 = 100 and 100 can be partitioned into 10 and 0 with a sum equal to 10 + 0 == 10.\n","        Hence, the punishment number of 10 is 1 + 81 + 100 = 182\n","\n","**Example 1:**\n","\n","- Input: `n=37`\n","\n","- Output: `1478`\n","\n","- Explanation:\n","\n","        There are exactly 4 integers i in the range [1, 37] that satisfy the conditions in the statement:\n","        - 1 since 1 * 1 = 1.\n","        - 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.\n","        - 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.\n","        - 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.\n","        Hence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"n\": 10,\n","        },\n","        \"output\": 182\n","    },\n","    {\n","        \"input\": {\n","            \"n\": 37,\n","        },\n","        \"output\": 1478\n","    },\n","]"],"metadata":{"id":"VD9YirfAdayx","executionInfo":{"status":"ok","timestamp":1739627846163,"user_tz":-420,"elapsed":1327,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["## Observations\n","\n","### Intuition\n","\n","In the previous approaches, we used string manipulation to get the answer. Now, instead of treating the problem as a sequence of string-based substrings, we can focus on partitioning the digits of a number using integer operations. This allows us to avoid the overhead of converting numbers to strings and directly work with the numeric properties of the number.\n","\n","We can use the modulo and division operations to extract different parts of a number. These operations let us break the number down into individual digits or groups of digits, which we can then use to test if their sum matches the target value.\n","\n","To understand this better, let's consider an example: the number `634`. Using the modulo operation, we can extract the digits or groups of digits as follows:\n","\n","- `634 % 10 = 4` (extracts the last digit)\n","- `634 % 100 = 34` (extracts the last two digits)\n","- `634 % 1000 = 634` (extracts the entire number)\n","\n","Now, using the division operation, we can continually reduce the number by removing its rightmost digits:\n","\n","- `634 / 10 = 63` (removes the last digit)\n","- `634 / 100 = 6` (removes the last two digits)\n","- `634 / 1000 = 0` (number is fully reduced)\n","\n","By performing these operations, we can generate permutations of the number from the rightmost side. This is a key **observation**: we start from the rightmost digits, using the modulo operation to extract the current part of the number and division to reduce the number progressively. When partitioning the number into its components, we want to break it down from the least significant digit (the rightmost side) to the most significant one.\n","\n","More specifically, when processing from the right, we are naturally ensuring that smaller partitions (from right to left) are handled first. For instance, `634` can be partitioned as: `4`, `34`, and `634`. If we try to partition from left to right, we're forced to consider all permutations of the number starting with the largest unit (which can quickly escalate into complex cases).\n","\n","### Algorithm\n","1. Initialize an integer `punishmentNum`, which represents the punishment number of the range `[1, num]`.\n","\n","2. Create the function `canPartition()`, which takes integer parameters `num` and `target` and returns a `boolean` value.\n","    - If `target` is less than `0` or `num `is less than `target`, return `false`, indicating that the current partition of `num` does not add up to `target`.\n","    - If `num` equals target, return `true`, indicating that the current partition of `num` adds up to target.\n","    - Otherwise, recursively check the digit combinations starting from the right side of the number to find any that make the summation equal to `target`, returning `true` if any are found.\n","\n","        - Check each possible combination of digits, removing them from `num` and subtracting them from `target`.\n","\n","        - Since `target` is bound by the constraint `1 <= num <= 1000`, we only have to check multiples of `10s`, `100s`, and `1000s`.\n","\n","3. Iterate through the integers from index `0` to `num`:\n","    \n","    - For each number, `currentNum`, calculate the squared value of `currentNum` and store it as `squareNum`.\n","    \n","    - Input the `currentNum` and `squareNum` into the function `canPartition()` as the `num` and `target` parameters, respectively.\n","    \n","    - If `canPartition()` returns `true`, add `currentNum` to `punishmentNum`.\n","\n","4. After all the iterations are completed, return `punishmentNum`."],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","from heapq import heapify, heappush, heappop\n","from queue import PriorityQueue\n","\n","class Solution:\n","    def can_partition(self, num, target):\n","        print(f\"num: {num}, target: {target}\")\n","        # Invalid partition found\n","        if target < 0 or num < target:\n","            return False\n","\n","        # Valid partition found\n","        if num == target:\n","            return True\n","\n","        # Recursively check all partitions for a valid partition\n","        return (\n","            self.can_partition(num // 10, target - num % 10)\n","            or self.can_partition(num // 100, target - num % 100)\n","            or self.can_partition(num // 1000, target - num % 1000)\n","        )\n","\n","    def punishmentNumber(self, n: int) -> int:\n","        punishment_num = 0\n","\n","        # Iterate through numbers in range [1, n]\n","        for current_num in range(1, n + 1):\n","            square_num = current_num * current_num\n","\n","            # Check if valid partition can be found and add squared number if so\n","            if self.can_partition(square_num, current_num):\n","                punishment_num += square_num\n","\n","        return punishment_num"],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1739627849931,"user_tz":-420,"elapsed":4,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.punishmentNumber(test_case[\"input\"][\"n\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"ok","timestamp":1739597365476,"user_tz":-420,"elapsed":3,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["solution = Solution()"],"metadata":{"id":"DxUmLWSkLz-V","executionInfo":{"status":"ok","timestamp":1739627865339,"user_tz":-420,"elapsed":752,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["solution.can_partition(112345, 10)"],"metadata":{"id":"M5MslD375p87","executionInfo":{"status":"ok","timestamp":1739627884979,"user_tz":-420,"elapsed":460,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}},"outputId":"ba749b16-3a3d-4551-85a8-efd46de35667","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["num: 112345, target: 10\n","num: 11234, target: 5\n","num: 1123, target: 1\n","num: 112, target: -2\n","num: 11, target: -22\n","num: 1, target: -122\n","num: 112, target: -29\n","num: 11, target: -229\n","num: 1123, target: -35\n","num: 112, target: -335\n"]},{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":[],"metadata":{"id":"RiiipEuZ5rb2"},"execution_count":null,"outputs":[]}]}