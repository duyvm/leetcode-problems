{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNdY2XayzUq1XDt/oTFQVTc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1726. Tuple with Same Product\n","\n","https://leetcode.com/problems/tuple-with-same-product/description/\n","\n","Given an array `nums` of distinct positive integers, return the ***number*** of tuples `(a, b, c, d)` such that `a * b = c * d` where `a`, `b`, `c`, and `d` are elements of `nums`, and `a != b != c != d`.\n","\n","**Constraints:**\n","- `1 <= nums.length <= 1000`\n","- `1 <= nums[i] <= 104`\n","- All elements in `nums` are distinct."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input: `nums = [2,3,4,6]`\n","- Output: `8`\n","- Explanation: There are 8 valid tuples:\n","  \n","  (2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n","  \n","  (3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)\n","\n","**Example 2:**\n","\n","- Input: `nums = [1,2,4,5,10]`\n","- Output: `16`\n","- Explanation: There are 16 valid tuples:\n","\n"," (1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n","\n"," (2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n","\n"," (2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n","\n"," (4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"markdown","source":["## Observations\n","\n","- Each four `a,b,c,d` satisfy conditions has `8` variant of tuples.\n","- Sort then ?\n","\n"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"edges\": [[1,2],[1,3],[2,3]]\n","        },\n","        \"output\": [2,3]\n","    },\n","    {\n","        \"input\": {\n","            \"edges\": [[1,2],[2,3],[3,4],[1,4],[1,5]]\n","        },\n","        \"output\": [1,4]\n","    },\n","]"],"metadata":{"id":"wNzMYBytDXO7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","\n","class Solution:\n","    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n","\n","        n = len(edges)\n","\n","        ans = []\n","\n","        node_map = defaultdict(set)\n","\n","        node_fre = defaultdict(int)\n","\n","        for i in range(n):\n","            a,b = edges[i]\n","            node_map[a].add(b)\n","            node_map[b].add(a)\n","            node_fre[a] += 1\n","            node_fre[b] += 1\n","\n","        q = deque()\n","\n","        for node, fre in node_fre.items():\n","            if fre == 1:\n","                q.append(node)\n","\n","        while q:\n","            source_node = q.pop()\n","            node_fre[source_node] -= 1\n","            for destination_node in node_map[source_node]:\n","                node_fre[destination_node] -= 1\n","                if node_fre[destination_node] == 1:\n","                    q.append(destination_node)\n","\n","        for edge in reversed(edges):\n","            if node_fre[edge[0]] > 1 and node_fre[edge[1]] > 1:\n","                return edge"],"metadata":{"id":"7N6VBRdIDUwD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.findRedundantConnection(test_case[\"input\"][\"edges\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ptz87InoLH62"},"execution_count":null,"outputs":[]}]}