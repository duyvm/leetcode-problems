{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP5B0f+htYWpvQJY0kcFuc0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1910. Remove All Occurrences of a Substring\n","\n","https://leetcode.com/problems/remove-all-occurrences-of-a-substring/description/\n","\n","Given two strings `s` and `part`, perform the following operation on `s` until all occurrences of the substring `part` are removed:\n","\n","Find the **leftmost** occurrence of the substring `part` and remove it from `s`.\n","Return `s` after removing all occurrences of part.\n","\n","A substring is a contiguous sequence of characters in a string.\n","\n","**Constraints:**\n","- `1 <= s.length <= 1000`\n","- `1 <= part.length <= 1000`\n","- `s`​​​​ and `part` consists of lowercase English letters."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input: `s = \"daabcbaabcbc\", part = \"abc\"`\n","- Output: `\"dab\"`\n","- Explanation: The following operations are done:\n","  - `s = \"daabcbaabcbc\"`, remove `\"abc\"` starting at index `2`, so `s = \"dabaabcbc\"`.\n","  - `s = \"dabaabcbc\"`, remove `\"abc\"` starting at index `4`, so `s = \"dababc\"`.\n","  - `s = \"dababc\"`, remove `\"abc\"` starting at index `3`, so `s = \"dab\"`.\n","  \n","   Now `s` has no occurrences of `\"abc\"`.\n","\n","**Example 2:**\n","\n","- Input: `s = \"axxxxyyyyb\", part = \"xy\"`\n","- Output: `ab`\n","- Explanation: The following operations are done:\n","- `s = \"axxxxyyyyb\"`, remove `\"xy\"` starting at index `4` so `s = \"axxxyyyb\"`.\n","- `s = \"axxxyyyb\"`, remove `\"xy\"` starting at index `3` so `s = \"axxyyb\"`.\n","- `s = \"axxyyb\"`, remove `\"xy\"` starting at index `2` so `s = \"axyb\"`.\n","- `s = \"axyb\"`, remove `\"xy\"` starting at index `1` so `s = \"ab\"`.\n","Now s has no occurrences of \"xy\"."],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"markdown","source":["## Observations\n","\n","<details>\n","\n","<summary>Approach 1 - Naive approach not doable </summary>\n","\n","- Should run one pass through `s`.\n","- The idea is to store a partial matched of `s` `start` and `end` index of `s` where as `s[start:end] = part[:end-start]` when passing through `s`. The distance between two partial matched part must be `0`, for example\n"," - 1st partial matched part: `[0, 2]`\n"," - 2nd partial matched part must start from `2`, i.e `[2, 3]` etc, if not, remove all the previous partital matched part.\n","- Each time there is a matching `s[start:end] = part`, remove that part and start over from previous `s[start]`\n","- Use a boolean to keep track of current `s[i]` is in matched sequence\n","- Let `0<= i < s.length`\n"," - while `i < s.length`:\n","   - if `s[i] = part[0]`:\n","      - `start = i`\n","      - if `start != queue[-1][1] + 1`, clear queue\n","      - `match_sequence_start = true`\n","      - `i += 1`\n","   - if `match_sequence_start` and `s[i] != part[i-start]`\n","      - `match_sequence_start = false`\n","      - `end = i`\n","      - if `part = s[start:end]`:\n","        - `s = s[:start] + s[end:]`\n","        - `i = queue.pop()[0]`\n","      - else\n","        - `queue.append([start, end])`\n","        - `i += 1`\n","     \n","\n","This approach has failed since there is case that at `s[i] = part[j]` and also `s[i] = part[0]`, the program does not know if it should be in the middle of matched part or start a new matched part -> This can resolve using KMP algorithm\n","\n","</details>\n","\n","<details>\n","\n","<summary>Approach 2 - OK</summary>\n","\n","- Should run one pass through `s`.\n","- Left `n` is `part.length`\n","- The idea is using an pointer `i` moving through `s`. From `i` check the if the part of s starting from `i-1` to the left is equal to `part` then remove it and continue.\n"," - From `i = 0`, if `s[i-n:i] == part`\n","   - Remove `s[i-n:i]`\n","   - Set `i = i - n`\n","   - Continue\n","</details>"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"s\": \"daabcbaabcbc\",\n","            \"part\": \"abc\"\n","        },\n","        \"output\": \"dab\"\n","    },\n","    {\n","        \"input\": {\n","            \"s\": \"axxxxyyyyb\",\n","            \"part\": \"xy\"\n","        },\n","        \"output\": \"ab\"\n","    },\n","    {\n","        \"input\": {\n","            \"s\": \"gjzgbpggjzgbpgsvpwdk\",\n","            \"part\": \"gjzgbpg\"\n","        },\n","        \"output\": \"svpwdk\"\n","    },\n","        {\n","        \"input\": {\n","            \"s\": \"kpygkivtlqoockpygkivtlqoocssnextkqzjpycbylkaondsskpygkpygkivtlqoocssnextkqzjpkpygkivtlqoocssnextkqzjpycbylkaondsycbylkaondskivtlqoocssnextkqzjpycbylkaondssnextkqzjpycbylkaondshijzgaovndkjiiuwjtcpdpbkrfsi\",\n","            \"part\": \"kpygkivtlqoocssnextkqzjpycbylkaonds\"\n","        },\n","        \"output\": \"hijzgaovndkjiiuwjtcpdpbkrfsi\"\n","    },\n","]"],"metadata":{"id":"wNzMYBytDXO7","executionInfo":{"status":"ok","timestamp":1739274437537,"user_tz":-420,"elapsed":27,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","\n","class Solution:\n","    def removeOccurrences(self, s: str, part: str) -> str:\n","        # print(f\"s: {s}, part: {part}\")\n","\n","        n = len(part)\n","\n","        i = 0\n","\n","        while i <= len(s):\n","\n","            if i >= n and s[i-n:i] == part:\n","                s = s[:i-n] + s[i:]\n","                i = i - n\n","            i += 1\n","\n","        return s"],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1739282189469,"user_tz":-420,"elapsed":3,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.removeOccurrences(test_case[\"input\"][\"s\"], test_case[\"input\"][\"part\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"ok","timestamp":1739282196369,"user_tz":-420,"elapsed":32,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":61,"outputs":[]},{"cell_type":"markdown","source":["## Observations\n","\n","<details>\n","\n","<summary>Approach 3 - KMP algorithm </summary>\n","\n","- Using LPS array to solve the problem\n","- Start from `i = 0`, iterate over `s`"],"metadata":{"id":"WB8mq_c__3Mp"}},{"cell_type":"code","source":["class Solution:\n","    def removeOccurrences(self, s: str, part: str) -> str:\n","        # Precompute KMP longest prefix-suffix array for the pattern\n","        kmp_lps = self._compute_longest_prefix_suffix(part)\n","\n","        # Using list as a stack to track characters and support pattern matching\n","        char_stack = []\n","\n","        # Array to store pattern matching indices during traversal\n","        pattern_indexes = [0] * (len(s) + 1)\n","\n","        str_index = 0\n","        pattern_index = 0\n","        while str_index < len(s):\n","            current_char = s[str_index]\n","            char_stack.append(current_char)\n","\n","            if current_char == part[pattern_index]:\n","                # Track the next pattern index when characters match\n","                pattern_indexes[len(char_stack)] = pattern_index + 1\n","                pattern_index += 1\n","\n","                if pattern_index == len(part):\n","                    # Remove entire matched pattern from stack\n","                    for _ in range(len(part)):\n","                        char_stack.pop()\n","\n","                    # Restore pattern index for next potential match\n","                    pattern_index = (\n","                        0\n","                        if not char_stack\n","                        else pattern_indexes[len(char_stack)]\n","                    )\n","            else:\n","                if pattern_index != 0:\n","                    # Backtrack pattern matching using KMP LPS\n","                    str_index -= 1\n","                    pattern_index = kmp_lps[pattern_index - 1]\n","                    char_stack.pop()\n","                else:\n","                    # Reset pattern index tracking when no match is possible\n","                    pattern_indexes[len(char_stack)] = 0\n","\n","            str_index += 1\n","\n","        # Convert remaining stack characters to result string\n","        return \"\".join(char_stack)\n","\n","    def _compute_longest_prefix_suffix(self, pattern: str) -> list:\n","        # Array to store the longest proper prefix which is also a suffix\n","        lps = [0] * len(pattern)\n","\n","        # Initialize tracking variables for prefix and current position\n","        current = 1\n","        prefix_length = 0\n","        while current < len(pattern):\n","            # If characters match, extend the prefix length\n","            if pattern[current] == pattern[prefix_length]:\n","                # Store the length of matching prefix\n","                prefix_length += 1\n","                lps[current] = prefix_length\n","                current += 1\n","\n","            # If characters don't match and we're not at the start of the pattern\n","            elif prefix_length != 0:\n","                # Backtrack to the previous longest prefix-suffix\n","                prefix_length = lps[prefix_length - 1]\n","\n","            # If no match and no prefix to backtrack\n","            else:\n","                # No prefix-suffix match found\n","                lps[current] = 0\n","                current += 1\n","\n","        # Return the computed longest prefix-suffix array\n","        return lps"],"metadata":{"id":"MX10EQr8CCgT","executionInfo":{"status":"ok","timestamp":1739282193265,"user_tz":-420,"elapsed":21,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"bVIW2JO0S9--"},"execution_count":null,"outputs":[]}]}