{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM07MVKFM7SY04RZ07YYfEt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1352. Product of the Last K Numbers\n","\n","https://leetcode.com/problems/product-of-the-last-k-numbers/description/\n","\n","Design an algorithm that accepts a stream of integers and retrieves the product of the last `k` integers of the stream.\n","\n","Implement the `ProductOfNumbers` class:\n","\n","- `ProductOfNumbers()` Initializes the object with an empty stream.\n","- `void add(int num)` Appends the integer `num` to the stream.\n","- `int getProduct(int k`) Returns the product of the last `k` numbers in the current list. You can assume that always the current list has at least k numbers.\n","\n","The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single **32-bit** integer without overflowing.\n","\n","**Constraints:**\n","- `0 <= num <= 100`\n","- `1 <= k <= 4 * 104`\n","- At most `4 * 104` calls will be made to `add` and `getProduct`.\n","- The product of the stream at any point in time will fit in a **32-bit** integer.\n","\n","**Follow-up**: Can you implement both `GetProduct` and `Add` to work in `O(1)` time complexity instead of `O(k)` time complexity?"],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input:\n","\n","        [\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n","        [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\n","\n","- Output:\n","\n","        [null,null,null,null,null,null,20,40,0,null,32]\n","\n","- Explanation:\n","\n","        ProductOfNumbers productOfNumbers = new ProductOfNumbers();\n","        productOfNumbers.add(3);        // [3]\n","        productOfNumbers.add(0);        // [3,0]\n","        productOfNumbers.add(2);        // [3,0,2]\n","        productOfNumbers.add(5);        // [3,0,2,5]\n","        productOfNumbers.add(4);        // [3,0,2,5,4]\n","        productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\n","        productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\n","        productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\n","        productOfNumbers.add(8);        // [3,0,2,5,4,8]\n","        productONumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"ope\": [\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"],\n","            \"param\": [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\n","        },\n","        \"output\": [None,None,None,None,None,None,20,40,0,None,32]\n","    },\n","    {\n","        \"input\": {\n","            \"ope\": [\"ProductOfNumbers\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"add\",\"add\"],\n","            \"param\": [[],[1],[1],[1],[1],[7],[6],[7]]\n","        },\n","        \"output\": [None,None,1,1,1,None,None,None]\n","    },\n","    {\n","        \"input\": {\n","            \"ope\": [\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\",\"add\"],\n","            \"param\": [[],[0],[5],[6],[2],[2],[8],[4],[2]]\n","        },\n","        \"output\": [None,None,None,None,30,30,None,0,None]\n","    },\n","]"],"metadata":{"id":"VD9YirfAdayx","executionInfo":{"status":"ok","timestamp":1739548586949,"user_tz":-420,"elapsed":377,"user":{"displayName":"Duy V천 Minh","userId":"02029714770423543928"}}},"execution_count":70,"outputs":[]},{"cell_type":"markdown","source":["## Observations"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","from heapq import heapify, heappush, heappop\n","from queue import PriorityQueue\n","\n","class ProductOfNumbers:\n","\n","    def __init__(self):\n","        self.size = 0\n","        self.products = [1]\n","\n","    def add(self, num: int) -> None:\n","        if num == 0:\n","            self.products = [1]\n","            self.size = 0\n","        else:\n","            self.products.append(self.products[self.size] * num)\n","            self.size += 1\n","\n","    def getProduct(self, k: int) -> int:\n","        if k > self.size:\n","            return 0\n","\n","        return self.products[self.size] // self.products[self.size - k]"],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1739549315626,"user_tz":-420,"elapsed":342,"user":{"displayName":"Duy V천 Minh","userId":"02029714770423543928"}}},"execution_count":85,"outputs":[]},{"cell_type":"code","source":["for test_case in test_cases:\n","    # print()\n","    opes = test_case[\"input\"][\"ope\"]\n","    params = test_case[\"input\"][\"param\"]\n","    outputs = test_case[\"output\"]\n","    # print(f\"ope: {opes}, param: {params}, output: {outputs}\")\n","    for i in range(len(opes)):\n","        ope, param, output = opes[i], params[i], outputs[i]\n","        # print(f\"ope: {ope}, param: {param}, output: {output}\")\n","        if ope == \"ProductOfNumbers\":\n","            obj = ProductOfNumbers()\n","        if ope == \"add\":\n","            obj.add(param[0])\n","        if ope == \"getProduct\":\n","            ans = obj.getProduct(param[0])\n","            if ans != output:\n","                print(f\"getProduct param: {param}, nums : {obj.nums}, products: {obj.products}, Expected: {output}, Got: {ans}\")"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"ok","timestamp":1739549316162,"user_tz":-420,"elapsed":3,"user":{"displayName":"Duy V천 Minh","userId":"02029714770423543928"}}},"execution_count":86,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Qir_kqwqlfTs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739546839813,"user_tz":-420,"elapsed":420,"user":{"displayName":"Duy V천 Minh","userId":"02029714770423543928"}},"outputId":"ebf87503-ca97-4cd7-db96-5aaa2cde59dd"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["32"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":[],"metadata":{"id":"V-3VyynnEkcq"},"execution_count":null,"outputs":[]}]}