{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNEyERAJFYLsF6IjEBkPOqN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1718. Construct the Lexicographically Largest Valid Sequence\n","\n","https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence/description/\n","\n","Given an integer `n`, find a sequence that satisfies all of the following:\n","\n","- The integer `1` occurs once in the sequence.\n","- Each integer between `2` and `n` occurs twice in the sequence.\n","- For every integer i between `2` and `n`, the **distance** between the two occurrences of `i` is exactly `i`.\n","\n","The **distance** between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`.\n","\n","Return the **lexicographically largest sequence**. It is guaranteed that under the given constraints, there is always a solution.\n","\n","A sequence `a` is **lexicographically larger** than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.\n","\n","**Constraints:**\n","- `1 <= n <= 20`"],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input: `n = 3`\n","\n","- Output: `[3,1,2,3,2]`\n","\n","- Explanation: `[2,3,2,1,3]` is also a valid sequence, but `[3,1,2,3,2]` is the lexicographically largest valid sequence.\n","\n","**Example 2:**\n","\n","- Input: `n=5`\n","\n","- Output: `[5,3,1,4,3,5,2,4,2]`"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"n\": 3,\n","        },\n","        \"output\": [3,1,2,3,2]\n","    },\n","    {\n","        \"input\": {\n","            \"n\": 5,\n","        },\n","        \"output\": [5,3,1,4,3,5,2,4,2]\n","    },\n","    {\n","        \"input\": {\n","            \"n\": 2,\n","        },\n","        \"output\": [2,1,2]\n","    },\n","    {\n","        \"input\": {\n","            \"n\": 4,\n","        },\n","        \"output\": [4,2,3,2,4,3,1]\n","    },\n","        {\n","        \"input\": {\n","            \"n\": 7,\n","        },\n","        \"output\": [7,5,3,6,4,3,5,7,4,6,2,1,2]\n","    },\n","]"],"metadata":{"id":"VD9YirfAdayx","executionInfo":{"status":"ok","timestamp":1739716555061,"user_tz":-420,"elapsed":300,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":74,"outputs":[]},{"cell_type":"markdown","source":["### Observations 1 - Failed\n","\n","- Sequence length must be `(n - 1) * 2 + 1`\n","- Given `a > b` then index of `a` must smaller than index of `b` (for lexicographically largest )\n","- Since `1` only occurs once. `1` can be place any where in the sequence\n","- For a integer `a` with index `i`, another `a`'s index must be `i + a`,\n","then each interger in range `[i+1:i+a]` must be smaller than its previous integer by `2`\n","\n","### Intuition\n","\n","- The idea is place bigger integer at first\n","- Let `a` is the integer with index `i`:\n","  - If `a` is odd, place `a-2, a-4, a-6..` in `[i+1:i+a]`\n","    - For the `i + a//2 ` and `i + a//2 + 1`, place `1` and `a-1`\n","  - If `a` is even,\n","    - Let `b` is the middle iteger for `[i+1:i+a]`\n","      - `b` must be `a-1`\n","  - Continue with the left over"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","from heapq import heapify, heappush, heappop\n","from queue import PriorityQueue\n","\n","class Solution:\n","    def constructDistancedSequence(self, n: int, outputLog=False) -> List[int]:\n","\n","        self.outputLog = outputLog\n","\n","        processed = set()\n","\n","        queue = [i for i in range(1, n+1)]\n","\n","        placing_count = (n -1)*2 + 1\n","\n","        arr = [0] * placing_count\n","\n","        current_idx = 0\n","\n","        while queue:\n","            current_i = queue.pop()\n","\n","            if current_i in processed:\n","                continue\n","\n","            processed.add(current_i)\n","\n","            arr[current_idx] = current_i\n","            placing_count = placing_count - 1\n","            if current_i != 1:\n","                arr[current_idx + current_i] = current_i\n","                placing_count = placing_count - 1\n","\n","            if self.outputLog:\n","                print(f\"while loop: {arr}\")\n","\n","            if placing_count == 0:\n","                break\n","\n","            if current_i % 2 != 0:\n","                placing_count = self.processOdd(arr, current_idx, current_i, processed, placing_count)\n","            else:\n","                placing_count = self.processEven(arr, current_idx, current_i, processed, placing_count)\n","\n","            current_idx = current_idx + current_i + 1\n","            if current_idx >= len(arr) or not placing_count:\n","                break\n","\n","            while arr[current_idx] != 0:\n","                current_idx = current_idx + 1\n","\n","        return arr\n","\n","    def processOdd(self, arr, source_idx, source_i, processed, placing_count):\n","        pair_value = source_i // 2 - 1\n","        for i in range(1, pair_value+1):\n","            target_integer = source_i - 2*i\n","            processed.add(target_integer)\n","            arr[source_idx+i] = target_integer\n","            arr[source_idx+source_i-i] = target_integer\n","            placing_count = placing_count - 2\n","            if not placing_count:\n","                return placing_count\n","\n","            if self.outputLog:\n","                print(f\"processOdd: for loop: {arr}\")\n","\n","        #  i + a//2 and i + a//2 + 1, place 1 and a-1\n","        if arr[source_idx + source_i//2] == 0:\n","            one_index = source_idx + source_i//2\n","            other_index = source_idx + source_i//2 + 1\n","        else:\n","            one_index = source_idx + source_i//2 + 1\n","            other_index = source_idx + source_i//2\n","\n","            if self.outputLog:\n","                print(f\"processOdd: place 1: {arr}\")\n","\n","        arr[one_index] = 1\n","        placing_count = placing_count - 1\n","        processed.add(1)\n","        if self.outputLog:\n","            print(f\"processOdd: place 1: {arr}\")\n","\n","\n","        if not placing_count:\n","            return placing_count\n","\n","        arr[other_index] = source_i - 1\n","        arr[other_index + + source_i - 1] = source_i - 1\n","        placing_count = placing_count - 2\n","\n","        if self.outputLog:\n","            print(f\"processOdd: place a- 1: {arr}\")\n","\n","\n","        processed.add(source_i - 1)\n","        return placing_count\n","\n","    def processEven(self, arr, source_idx, source_i, processed, placing_count):\n","        if self.outputLog:\n","            print(f\"source_idx, source_i, placing_count: { source_idx, source_i, placing_count}\")\n","        mid_idx = source_idx + source_i//2\n","        mid_i = source_i - 1\n","        if source_i - 1 not in processed:\n","\n","            arr[mid_idx] = source_i - 1\n","            placing_count = placing_count - 1\n","            if not placing_count:\n","                return placing_count\n","            if mid_i != 1:\n","                arr[mid_idx + source_i - 1] = source_i - 1\n","                placing_count = placing_count - 1\n","\n","        if not placing_count:\n","            return placing_count\n","\n","        if self.outputLog:\n","            print(f\"processEven: place mid: {arr}\")\n","\n","        processed.add(source_i - 1)\n","\n","        pair_value = mid_idx - source_idx - 1\n","        for i in range(1, pair_value+1):\n","            target_integer = source_i - 2*i\n","            processed.add(target_integer)\n","            arr[source_idx+i] = target_integer\n","            arr[source_idx+source_i-i] = target_integer\n","            placing_count = placing_count - 2\n","\n","            if self.outputLog:\n","                print(f\"processEven: for loop: {arr}\")\n","            if not placing_count:\n","                return placing_count\n","\n","        return placing_count"],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1739712697229,"user_tz":-420,"elapsed":303,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":59,"outputs":[]},{"cell_type":"markdown","source":["### Observations 2 - Backtracking - Implemented following Leetcode editorial\n","\n","- Sequence length must be `(n - 1) * 2 + 1`\n","- Given `a > b` then index of `a` must smaller than index of `b` (for lexicographically largest )\n","- Since `1` only occurs once. `1` can be place any where in the sequence\n","- For a integer `a` with index `i`, another `a`'s index must be `i + a`,\n","then each interger in range `[i+1:i+a]` must be smaller than its previous integer by `2`\n","\n","### Intuition\n","\n","- The idea is to recursively try all the possible sequence (in a smart way) using backtracking\n","- Trying placing from `n` to `1` to find the largest sequence. The first valid sequence is the largest valid sequence\n","- Start with index `0`. For each recursive:\n","\n","    - If the current index is already filled at the start of recursive round, we start next recursive round with next index in the `result` array\n","    \n","    - We try place the current position for all the integer from `1` to `n`\n","        \n","    - Each time we place an integer, use an boolean `isPlaced` array to track it then start next recursive round with next index in the `result` array\n","        \n","        - If we found the valid sequence and the last index, stop and return the result\n","        \n","        - If we are at the end and can not find the valid sequence, return `false` and backtracking\n","            \n","            - Return to the previous recursive round with `false` value\n","            \n","            - Remove the placed integer in `result`\n","\n","            - Change `isPlaced[integer]` to `false`\n","            \n","            - Try with the next integer in the loop"],"metadata":{"id":"MWZoCnMdD53-"}},{"cell_type":"code","source":["class Solution:\n","    def constructDistancedSequence(self, target_number: int) -> List[int]:\n","        l = (target_number - 1) * 2 + 1\n","\n","        # output array\n","        arr = [0] * l\n","\n","        # tracking array, add 1 since we do not convert target_num to 0-index\n","        isPlaced = [False] * (target_number + 1)\n","\n","        # since the input guarantees a valid sequence\n","        # do not need to use the function output\n","        self.find_lexicographically_largest_sequence(\n","            0, arr, isPlaced, target_number\n","        )\n","\n","        return arr\n","\n","    def find_lexicographically_largest_sequence(\n","        self, current_index, arr, isPlaced, target_number\n","    ):\n","        # if we got to the end of array\n","        if current_index == len(arr):\n","            return True\n","\n","        # if position already been filled, go to next position\n","        if arr[current_index] != 0:\n","            return self.find_lexicographically_largest_sequence(\n","                current_index + 1,\n","                arr,\n","                isPlaced,\n","                target_number,\n","            )\n","\n","        # try to fill with all the value from n to 1\n","        for i in range(target_number, 0, -1):\n","            if isPlaced[i]:\n","                continue\n","\n","            isPlaced[i] = True\n","\n","            if i == 1:\n","                arr[current_index] = i\n","                if self.find_lexicographically_largest_sequence(\n","                    current_index + 1,\n","                    arr,\n","                    isPlaced,\n","                    target_number,\n","                ):\n","                    return True\n","\n","            # check if i is a valid cadidate for current position\n","            elif current_index + i < len(arr) and arr[current_index + i] == 0:\n","                arr[current_index] = i\n","                arr[current_index + i] = i\n","\n","                # if following current placement and got a valid sequence\n","                if self.find_lexicographically_largest_sequence(\n","                    current_index + 1,\n","                    arr,\n","                    isPlaced,\n","                    target_number,\n","                ):\n","                    return True\n","\n","                # no valid sequence for current placement, backtracking\n","                arr[current_index + i] = 0\n","\n","            arr[current_index] = 0\n","            isPlaced[i] = False\n","\n","        # loop all [1:n+1] but found no valid sequence\n","        return False"],"metadata":{"id":"oDvF7tLqIyH6","executionInfo":{"status":"ok","timestamp":1739717053027,"user_tz":-420,"elapsed":300,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":78,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.constructDistancedSequence(test_case[\"input\"][\"n\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"ok","timestamp":1739717053325,"user_tz":-420,"elapsed":2,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":79,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","test_case = 4\n","\n","\n","result = solution.constructDistancedSequence(test_cases[test_case][\"input\"][\"n\"])\n","if result != test_cases[test_case][\"output\"]:\n","    print(f'Failed test case with input: {test_cases[test_case][\"input\"]} and output: {test_cases[test_case][\"output\"]} vs result: {result}')"],"metadata":{"id":"OXlb9FlT1dfy","executionInfo":{"status":"ok","timestamp":1739716594884,"user_tz":-420,"elapsed":303,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":77,"outputs":[]}]}