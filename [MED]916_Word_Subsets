{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNhtRe/q8IIRRkgefvGfj0L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 916. Word Subsets\n","\n","https://leetcode.com/problems/word-subsets/description/\n","\n","You are given two string arrays `words1` and `words2`.\n","\n","A string `b` is a **subset** of string `a` if every letter in `b` occurs in `a` including multiplicity.\n","\n","- For example, `\"wrr\"` is a subset of `\"warrior\"` but is not a subset of `\"world\"`.\n","\n","A string `a` from `words1` is universal if for every string `b` in `words2`, `b` is a subset of `a`.\n","\n","Return an array of all the universal strings in `words1`. You may return the answer in any order.\n","\n","**Constraints:**\n","- `1 <= words1.length, words2.length <= 104`\n","- `1 <= words1[i].length, words2[i].length <= 10`\n","- `words1[i]` and `words2[i]` consist only of lowercase English letters.\n","- All the strings of `words1` are unique."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input: `words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]`\n","- Output: `[\"facebook\",\"google\",\"leetcode\"]`\n","\n","**Example 2:**\n","\n","- Input: ` words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"lc\",\"eo\"]`\n","- Output: `[\"leetcode\"]`\n","\n","**Example 3:**\n","\n","- Input: `words1 = [\"acaac\",\"cccbb\",\"aacbb\",\"caacc\",\"bcbbb\"], words2 = [\"c\",\"cc\",\"b\"]`\n","- Output: `[\"cccbb\"]`"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"markdown","source":["## Observations"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"arr\": [1,3,4,2],\n","            \"mat\": [[1,4],[2,3]]\n","        },\n","        \"output\": 2\n","    },\n","    {\n","        \"input\": {\n","            \"arr\": [2,8,7,4,1,3,5,6,9],\n","            \"mat\": [[3,2,5],[1,4,6],[8,7,9]]\n","        },\n","        \"output\": 3\n","    },\n","]"],"metadata":{"id":"wNzMYBytDXO7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","    def wordSubsets(self, words1: List[str], words2: List[str], log = False) -> List[str]:\n","        uni_words = []\n","        words1_buckets = []\n","        words2_freq_bucket = self.create_max_freq_count_for_words2(words2)\n","        if log:\n","            print(\"Frequency counts for all word in words2: \", words2_freq_bucket)\n","\n","        for word1 in words1:\n","            words1_buckets.append(self.freq_count(word1))\n","\n","        if log:\n","            for i, w1_freq_bucket in enumerate(words1_buckets):\n","                print(f\"Frequencey counts for {words1[i]}: \", w1_freq_bucket)\n","\n","        for i, w1_freq_bucket in enumerate(words1_buckets):\n","            if not self.is_w1_subset_of_w2(words2_freq_bucket, w1_freq_bucket):\n","                continue\n","            else:\n","                uni_words.append(words1[i])\n","\n","        return uni_words\n","\n","    def is_w1_subset_of_w2(self, w1_freq_bucket, w2_freq_bucket):\n","        for _ch, count in w1_freq_bucket.items():\n","            if _ch not in w2_freq_bucket:\n","                return False\n","            if count > w2_freq_bucket[_ch]:\n","                return False\n","        return True\n","\n","    def create_max_freq_count_for_words2(self, words):\n","        freq_bucket = dict()\n","        for word in words:\n","            current_word_freq_bucket = dict()\n","            for _ch in word:\n","                if _ch not in current_word_freq_bucket:\n","                    current_word_freq_bucket[_ch] = 1\n","                else:\n","                    current_word_freq_bucket[_ch] += 1\n","\n","            for k,v in current_word_freq_bucket.items():\n","                if k in freq_bucket:\n","                    freq_bucket[k] = max(freq_bucket[k], v)\n","                else:\n","                    freq_bucket[k] = v\n","\n","        return freq_bucket\n","\n","    def freq_count(self, word):\n","        freq_bucket = dict()\n","        for _ch in word:\n","            if _ch not in freq_bucket:\n","                freq_bucket[_ch] = 1\n","            else:\n","                freq_bucket[_ch] += 1\n","        return freq_bucket"],"metadata":{"id":"7N6VBRdIDUwD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.wordSubsets(test_case[\"input\"][\"words1 \"], test_case[\"input\"][\"words2\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"YdtZVTiMOA7P"},"execution_count":null,"outputs":[]}]}