{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMd9i7MVxFjqWA9HpgPuwHi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 2493. Divide Nodes Into the Maximum Number of Groups\n","\n","\n","https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups/description/\n","\n","\n","You are given a positive integer `n` representing the number of nodes in an undirected graph. The nodes are labeled from `1` to `n`.\n","\n","You are also given a **2D integer** array `edges`, where `edges[i] = [a`<sub>`i`</sub>`, b`<sub>`i`</sub>`]` indicates that there is a bidirectional edge between nodes `a`<sub>`i`</sub> and `b`<sub>`i`</sub>. Notice that the given graph may be disconnected.\n","\n","Divide the nodes of the graph into `m` groups (1-indexed) such that:\n","\n","- Each node in the graph belongs to exactly one group.\n","- For every pair of nodes in the graph that are connected by an edge `[a`<sub>`i`</sub>`, b`<sub>`i`</sub>`]`, if `a`<sub>`i`</sub> belongs to the group with index `x`, and `b`<sub>`i`</sub> belongs to the group with index `y`, then `|y - x| = 1`.\n","\n","Return the **maximum** number of groups (i.e., maximum `m`) into which you can divide the nodes. Return `-1` if it is impossible to group the nodes with the given conditions.\n","\n","**Constraints:**\n","- `1 <= n <= 500`\n","- `1 <= edges.length <= 104`\n","- `edges[i].length == 2`\n","- `1 <= ai, bi <= n`\n","- `ai != bi`\n","- There is at most one edge between any pair of vertices."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","![grid1](https://drive.google.com/uc?id=1xFDfpA8v1aQvX_ICTOSo3cQTazkW7Q8Q)\n","\n","- Input: `n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]`\n","- Output: `4`\n","- Explanation: As shown in the image we:\n","  - Add node 5 to the first group.\n","  - Add node 1 to the second group.\n","  - Add nodes 2 and 4 to the third group.\n","  - Add nodes 3 and 6 to the fourth group.\n","   \n","   We can see that every edge is satisfied.\n","   It can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied.\n","\n","**Example 2:**\n","\n","- Input: `n = 3, edges = [[1,2],[2,3],[3,1]]`\n","- Output: `-1`\n","- Explanation: If we add node 1 to the first group, node 2 to the second group,\n","  and node 3 to the third group to satisfy the first two edges, we can see that the third edge will not be satisfied.\n","\n","  It can be shown that no grouping is possible.\n"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"markdown","source":["## Observations\n","\n","- If two nodes have an edge between them, each of them must be in adjacent groups\n","- Since it can be disconnected graph, we can split graph into multiple connected components. Then we find the maximum number of groups in each connected components and return the sum of all connected components.\n","- The connected component must be bipartite graph, i.e not odd cycle\n","- Maximum number of groups is `m = n`\n","- A group is not a connected component\n","- Loop over edges to find all the connected components\n","- Let 2-D arrays `node2node` size `n` where `node2node[i]` is a list of nodes that have edge with node `i`\n","- For each connected component:\n"," - Let `v` is a node has only `1` edge, fix `v` to the leftmost group\n"," - From `v` fix other nodes using BFS with root `v`"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"edges\": [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]],\n","            \"n\": 6\n","        },\n","        \"output\": 4\n","    },\n","    {\n","        \"input\": {\n","            \"edges\": [[1,2],[2,3],[3,1]],\n","            \"n\": 3\n","        },\n","        \"output\": -1\n","    },\n","    {\n","        \"input\": {\n","            \"edges\": [[9,16],[8,3],[20,21],[12,16],[14,3],[7,21],[22,3],[22,18],[11,16],[25,4],[2,4],[14,21],[23,3],[17,3],[2,16],[24,16],[13,4],[10,21],[7,4],[9,18],[14,18],[14,4],[14,16],[1,3],[25,18],[17,4],[1,16],[23,4],[2,21],[5,16],[24,18],[20,18],[19,16],[24,21],[9,3],[24,3],[19,18],[25,16],[19,21],[6,3],[26,18],[5,21],[20,16],[2,3],[10,18],[26,16],[8,4],[11,21],[23,16],[13,16],[25,3],[7,18],[19,3],[20,4],[26,3],[23,18],[15,18],[17,18],[10,16],[26,21],[23,21],[7,16],[8,18],[10,4],[24,4],[7,3],[11,18],[9,4],[26,4],[13,21],[22,16],[22,21],[20,3],[6,18],[9,21],[10,3],[22,4],[1,18],[25,21],[11,4],[1,21],[15,3],[1,4],[15,16],[2,18],[13,3],[8,21],[13,18],[11,3],[15,21],[8,16],[17,16],[15,4],[12,3],[6,4],[17,21],[5,18],[6,16],[6,21],[12,4],[19,4],[5,3],[12,21],[5,4]],\n","            \"n\": 26\n","        },\n","        \"output\": 4\n","    },\n","    {\n","        \"input\": {\n","            \"edges\": [[366,183],[81,44],[242,91],[69,97],[39,373],[391,386],[342,349],[136,229],[393,386],[60,185],[225,437],[168,138],[408,238],[162,403],[294,401],[171,356],[248,194],[152,241],[393,44],[399,105],[139,420],[343,241],[122,239],[31,239],[303,185],[292,260],[19,271],[389,410],[212,83],[219,44],[393,335],[68,62],[417,118],[150,437],[200,183],[257,359],[329,426],[265,367],[126,1],[261,416],[385,280],[200,359],[3,50],[11,52],[269,349],[18,412],[343,107],[76,437],[35,436],[336,437],[155,97],[78,377],[448,359],[155,52],[351,214],[400,367],[253,44],[102,214],[218,4],[6,91],[10,412],[323,107],[294,44],[395,236],[87,185],[115,447],[100,386],[169,194],[103,284],[126,44],[413,377],[64,185],[305,44],[216,239],[414,128],[249,183],[191,426],[28,412],[299,398],[440,235],[307,183],[145,52],[405,118],[264,410],[279,235],[181,437],[102,236],[22,118],[347,105],[325,437],[423,284],[80,273],[66,401],[161,377],[208,50],[207,280],[199,128],[246,1],[12,111],[16,50],[49,412],[414,412],[39,330],[429,430],[269,386],[18,214],[421,425],[422,4],[249,430],[264,273],[78,436],[21,284],[136,238],[90,194],[289,62],[414,185],[427,52],[39,258],[35,107],[301,185],[422,436],[75,377],[6,398],[159,262],[413,91],[314,105],[176,280],[289,105],[384,182],[193,29],[211,83],[66,425],[421,416],[148,398],[37,238],[181,403],[351,280],[129,403],[448,273],[299,258],[222,386],[247,4],[269,83],[33,349],[78,118],[353,280],[340,185],[360,352],[438,194],[99,335],[396,235],[152,441],[424,373],[174,214],[133,62],[166,280],[237,436],[253,50],[247,260],[247,436],[256,183],[147,398],[134,97],[25,229],[146,183],[102,352],[225,241],[331,426],[444,252],[369,401],[46,262],[274,52],[244,62],[423,241],[440,252],[60,426],[201,335],[47,386],[186,91],[344,4],[38,107],[66,239],[43,107],[35,430],[443,280],[30,107],[131,273],[108,425],[181,116],[417,138],[86,52],[364,62],[317,425],[248,367],[379,359],[47,349],[206,91],[237,349],[165,236],[339,262],[384,185],[75,367],[3,271],[149,401],[294,447],[19,437],[53,403],[245,52],[122,29],[19,273],[365,236],[247,194],[5,441],[96,236],[78,403],[45,235],[266,128],[197,214],[336,118],[78,175],[303,50],[378,441],[152,97],[16,229],[434,52],[74,401],[248,138],[376,367],[297,138],[353,412],[311,273],[66,273],[257,116],[165,352],[302,284],[327,359],[161,420],[370,425],[202,116],[23,83],[203,386],[163,83],[32,447],[160,252],[209,377],[360,398],[19,138],[369,284],[220,280],[17,284],[395,105],[303,214],[423,430],[72,447],[173,436],[409,52],[427,1],[106,349],[390,403],[435,412],[104,111],[332,280],[316,52],[380,352],[154,386],[86,280],[133,373],[47,377],[45,330],[347,416],[207,138],[281,401],[43,425],[77,367],[332,105],[427,105],[264,118],[46,138],[421,97],[230,398],[139,91],[184,183],[328,128],[439,105],[31,398],[165,425],[31,241],[369,118],[147,447],[340,373],[37,349],[146,359],[96,349],[306,238],[443,29],[117,97],[5,262],[396,91],[86,194],[223,386],[423,4],[79,1],[106,183],[365,349],[360,426],[112,185],[203,236],[165,403],[169,175],[342,377],[43,138],[342,214],[101,284],[148,238],[247,118],[197,420],[15,356],[161,185],[313,416],[3,410],[409,273],[134,4],[369,437],[215,50],[207,359],[215,377],[16,105],[67,349],[267,182],[270,356],[283,352],[226,1],[405,183],[414,335],[17,436],[318,386],[192,97],[411,447],[156,377],[413,425],[160,425],[317,358],[371,91],[320,105],[432,189],[253,236],[147,273],[85,1],[347,330],[270,29],[2,377],[342,138],[207,358],[103,386],[20,280],[121,111],[302,356],[331,1],[366,398],[331,194],[147,252]],\n","            \"n\": 448\n","        },\n","        \"output\": 181\n","    },\n","\n","]"],"metadata":{"id":"wNzMYBytDXO7","executionInfo":{"status":"ok","timestamp":1739634825744,"user_tz":-420,"elapsed":378,"user":{"displayName":"Duy VÃµ Minh","userId":"02029714770423543928"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["from typing import List, DefaultDict, Set\n","from collections import defaultdict\n","from collections import deque\n","\n","class Solution:\n","    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:\n","\n","        node2node = defaultdict(list)\n","\n","        for edge in edges:\n","            node2node[edge[0]].append(edge[1])\n","            node2node[edge[1]].append(edge[0])\n","\n","        connected_components = self.find_connected_components(n, node2node)\n","\n","        \"\"\"\n","        for component in connected_components:\n","            print(component)\n","        \"\"\"\n","        max_num_group = 0\n","\n","\n","        for component in connected_components:\n","            if len(component) == 1:\n","                max_num_group += 1\n","                continue\n","\n","            num_group = self.find_maximum_number_of_groups_in_component(component, node2node)\n","\n","            if num_group == -1:\n","                return num_group\n","\n","            max_num_group += num_group\n","\n","        return max_num_group\n","\n","\n","    def find_maximum_number_of_groups_in_component(self, component, node2node) -> int:\n","        # print(f\"component: {component} \")\n","\n","        root_candidate = []\n","        min_edges = 26\n","        # print(f\"init root: {root_candidate}\")\n","\n","        for node in component:\n","            if len(node2node[node]) == 1:\n","                # print(f\"Found root candidate: {node}: {node2node[node]}\")\n","                root_candidate = [ node ]\n","                break\n","\n","            if len(node2node[node]) < min_edges:\n","                root_candidate = [ node ]\n","                min_edges = len(node2node[node])\n","                continue\n","\n","            if len(node2node[node]) == min_edges:\n","                root_candidate.append(node)\n","\n","        # print(f\"fixed root: {root} \")\n","\n","        group = dict()\n","\n","        group[root] = 1\n","\n","        queue = deque([root])\n","\n","        while queue:\n","            node = queue.popleft()\n","\n","            for neighbor in node2node[node]:\n","                if neighbor in group:\n","                    if group[neighbor] == group[node]:\n","                        return -1\n","                    continue\n","\n","                group[neighbor] = group[node] + 1\n","                queue.append(neighbor)\n","\n","        # print(f\"group: {group} \")\n","\n","        return max(group.values())\n","\n","    def find_connected_components(self, n, node2node) -> List[Set]:\n","        # find connected components\n","        connected_components = defaultdict(set)\n","\n","        processed_nodes = set()\n","\n","\n","        for i in range(1, n+1):\n","            if i in processed_nodes:\n","                continue\n","\n","            queue = [i]\n","\n","            connected_components[i].add(i)\n","\n","            while queue:\n","\n","                # print(f\"processed_nodes: {processed_nodes}\")\n","                # print(f\"queue: {queue}\")\n","                # print(f\"connected_component: {connected_components}\")\n","\n","                node = queue.pop()\n","\n","                if node in processed_nodes:\n","                    continue\n","\n","                processed_nodes.add(node)\n","\n","                for neighbor in node2node[node]:\n","                    if neighbor in processed_nodes:\n","                        continue\n","                    connected_components[i].add(neighbor)\n","                    queue.append(neighbor)\n","\n","        # print(f\"final connected_component: {connected_components}\")\n","\n","        return [ list(v) for v in connected_components.values() ]"],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1739634848231,"user_tz":-420,"elapsed":545,"user":{"displayName":"Duy VÃµ Minh","userId":"02029714770423543928"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.magnificentSets(test_case[\"input\"][\"n\"], test_case[\"input\"][\"edges\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739634848231,"user_tz":-420,"elapsed":5,"user":{"displayName":"Duy VÃµ Minh","userId":"02029714770423543928"}},"outputId":"85a4cb50-a1ff-4b3d-cd4e-a5c38081c272"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Failed test case with input: {'edges': [[366, 183], [81, 44], [242, 91], [69, 97], [39, 373], [391, 386], [342, 349], [136, 229], [393, 386], [60, 185], [225, 437], [168, 138], [408, 238], [162, 403], [294, 401], [171, 356], [248, 194], [152, 241], [393, 44], [399, 105], [139, 420], [343, 241], [122, 239], [31, 239], [303, 185], [292, 260], [19, 271], [389, 410], [212, 83], [219, 44], [393, 335], [68, 62], [417, 118], [150, 437], [200, 183], [257, 359], [329, 426], [265, 367], [126, 1], [261, 416], [385, 280], [200, 359], [3, 50], [11, 52], [269, 349], [18, 412], [343, 107], [76, 437], [35, 436], [336, 437], [155, 97], [78, 377], [448, 359], [155, 52], [351, 214], [400, 367], [253, 44], [102, 214], [218, 4], [6, 91], [10, 412], [323, 107], [294, 44], [395, 236], [87, 185], [115, 447], [100, 386], [169, 194], [103, 284], [126, 44], [413, 377], [64, 185], [305, 44], [216, 239], [414, 128], [249, 183], [191, 426], [28, 412], [299, 398], [440, 235], [307, 183], [145, 52], [405, 118], [264, 410], [279, 235], [181, 437], [102, 236], [22, 118], [347, 105], [325, 437], [423, 284], [80, 273], [66, 401], [161, 377], [208, 50], [207, 280], [199, 128], [246, 1], [12, 111], [16, 50], [49, 412], [414, 412], [39, 330], [429, 430], [269, 386], [18, 214], [421, 425], [422, 4], [249, 430], [264, 273], [78, 436], [21, 284], [136, 238], [90, 194], [289, 62], [414, 185], [427, 52], [39, 258], [35, 107], [301, 185], [422, 436], [75, 377], [6, 398], [159, 262], [413, 91], [314, 105], [176, 280], [289, 105], [384, 182], [193, 29], [211, 83], [66, 425], [421, 416], [148, 398], [37, 238], [181, 403], [351, 280], [129, 403], [448, 273], [299, 258], [222, 386], [247, 4], [269, 83], [33, 349], [78, 118], [353, 280], [340, 185], [360, 352], [438, 194], [99, 335], [396, 235], [152, 441], [424, 373], [174, 214], [133, 62], [166, 280], [237, 436], [253, 50], [247, 260], [247, 436], [256, 183], [147, 398], [134, 97], [25, 229], [146, 183], [102, 352], [225, 241], [331, 426], [444, 252], [369, 401], [46, 262], [274, 52], [244, 62], [423, 241], [440, 252], [60, 426], [201, 335], [47, 386], [186, 91], [344, 4], [38, 107], [66, 239], [43, 107], [35, 430], [443, 280], [30, 107], [131, 273], [108, 425], [181, 116], [417, 138], [86, 52], [364, 62], [317, 425], [248, 367], [379, 359], [47, 349], [206, 91], [237, 349], [165, 236], [339, 262], [384, 185], [75, 367], [3, 271], [149, 401], [294, 447], [19, 437], [53, 403], [245, 52], [122, 29], [19, 273], [365, 236], [247, 194], [5, 441], [96, 236], [78, 403], [45, 235], [266, 128], [197, 214], [336, 118], [78, 175], [303, 50], [378, 441], [152, 97], [16, 229], [434, 52], [74, 401], [248, 138], [376, 367], [297, 138], [353, 412], [311, 273], [66, 273], [257, 116], [165, 352], [302, 284], [327, 359], [161, 420], [370, 425], [202, 116], [23, 83], [203, 386], [163, 83], [32, 447], [160, 252], [209, 377], [360, 398], [19, 138], [369, 284], [220, 280], [17, 284], [395, 105], [303, 214], [423, 430], [72, 447], [173, 436], [409, 52], [427, 1], [106, 349], [390, 403], [435, 412], [104, 111], [332, 280], [316, 52], [380, 352], [154, 386], [86, 280], [133, 373], [47, 377], [45, 330], [347, 416], [207, 138], [281, 401], [43, 425], [77, 367], [332, 105], [427, 105], [264, 118], [46, 138], [421, 97], [230, 398], [139, 91], [184, 183], [328, 128], [439, 105], [31, 398], [165, 425], [31, 241], [369, 118], [147, 447], [340, 373], [37, 349], [146, 359], [96, 349], [306, 238], [443, 29], [117, 97], [5, 262], [396, 91], [86, 194], [223, 386], [423, 4], [79, 1], [106, 183], [365, 349], [360, 426], [112, 185], [203, 236], [165, 403], [169, 175], [342, 377], [43, 138], [342, 214], [101, 284], [148, 238], [247, 118], [197, 420], [15, 356], [161, 185], [313, 416], [3, 410], [409, 273], [134, 4], [369, 437], [215, 50], [207, 359], [215, 377], [16, 105], [67, 349], [267, 182], [270, 356], [283, 352], [226, 1], [405, 183], [414, 335], [17, 436], [318, 386], [192, 97], [411, 447], [156, 377], [413, 425], [160, 425], [317, 358], [371, 91], [320, 105], [432, 189], [253, 236], [147, 273], [85, 1], [347, 330], [270, 29], [2, 377], [342, 138], [207, 358], [103, 386], [20, 280], [121, 111], [302, 356], [331, 1], [366, 398], [331, 194], [147, 252]], 'n': 448} and output: 181 vs result: 177\n"]}]},{"cell_type":"code","source":["solution = Solution()\n","\n","result = solution.magnificentSets(test_cases[2][\"input\"][\"n\"], test_cases[2][\"input\"][\"edges\"])\n","if result != test_cases[2][\"output\"]:\n","    print(f'Failed test case with input: {test_cases[2][\"input\"]} and output: {test_cases[2][\"output\"]} vs result: {result}')"],"metadata":{"id":"Ptz87InoLH62","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739634527808,"user_tz":-420,"elapsed":314,"user":{"displayName":"Duy VÃµ Minh","userId":"02029714770423543928"}},"outputId":"ef02e96a-69e9-4986-8c8b-16880b614b2e"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["init root: 1\n","fixed root: 12 \n"]}]},{"cell_type":"code","source":["class Solution:\n","    # Main function to calculate the maximum number of groups for the entire graph\n","    def magnificentSets(self, n, edges):\n","        adj_list = [[] for _ in range(n)]\n","        parent = [-1] * n\n","        depth = [0] * n\n","\n","        # Build the adjacency list and apply Union-Find for each edge\n","        for edge in edges:\n","            adj_list[edge[0] - 1].append(edge[1] - 1)\n","            adj_list[edge[1] - 1].append(edge[0] - 1)\n","            self._union(edge[0] - 1, edge[1] - 1, parent, depth)\n","\n","        \"\"\"\n","        for i in range(n):\n","            print(f\"i: {i}, parent: {self._find(i, parent)}\")\n","\n","\n","        \"\"\"\n","        num_of_groups_for_component = {}\n","\n","        # For each node, calculate the maximum number of groups for its component\n","        for node in range(n):\n","            number_of_groups = self._get_number_of_groups(adj_list, node, n)\n","            if number_of_groups == -1:\n","                return -1  # If invalid split, return -1\n","            root_node = self._find(node, parent)\n","            num_of_groups_for_component[root_node] = max(\n","                num_of_groups_for_component.get(root_node, 0), number_of_groups\n","            )\n","\n","        # Calculate the total number of groups across all components\n","        total_number_of_groups = sum(num_of_groups_for_component.values())\n","        return total_number_of_groups\n","\n","    # Function to calculate the number of groups for a given component starting from srcNode\n","    def _get_number_of_groups(self, adj_list, src_node, n):\n","        nodes_queue = deque()\n","        layer_seen = [-1] * n\n","        nodes_queue.append(src_node)\n","        layer_seen[src_node] = 0\n","        deepest_layer = 0\n","\n","        # Perform BFS to calculate the number of layers (groups)\n","        while nodes_queue:\n","            num_of_nodes_in_layer = len(nodes_queue)\n","            for _ in range(num_of_nodes_in_layer):\n","                current_node = nodes_queue.popleft()\n","                for neighbor in adj_list[current_node]:\n","                    # If neighbor hasn't been visited, assign it to the next layer\n","                    if layer_seen[neighbor] == -1:\n","                        layer_seen[neighbor] = deepest_layer + 1\n","                        nodes_queue.append(neighbor)\n","                    else:\n","                        # If the neighbor is already in the same layer, return -1 (invalid partition)\n","                        if layer_seen[neighbor] == deepest_layer:\n","                            return -1\n","            deepest_layer += 1\n","        return deepest_layer\n","\n","    # Find the root of the given node in the Union-Find structure\n","    def _find(self, node, parent):\n","        while parent[node] != -1:\n","            node = parent[node]\n","        return node\n","\n","    # Union operation to merge two sets\n","    def _union(self, node1, node2, parent, depth):\n","        node1 = self._find(node1, parent)\n","        node2 = self._find(node2, parent)\n","\n","        # If both nodes already belong to the same set, no action needed\n","        if node1 == node2:\n","            return\n","\n","        # Union by rank (depth) to keep the tree balanced\n","        if depth[node1] < depth[node2]:\n","            node1, node2 = node2, node1\n","        parent[node2] = node1\n","\n","        # If the depths are equal, increment the depth of the new root\n","        if depth[node1] == depth[node2]:\n","            depth[node1] += 1"],"metadata":{"id":"rBSJ1Z5N8P6e","executionInfo":{"status":"ok","timestamp":1739632649018,"user_tz":-420,"elapsed":304,"user":{"displayName":"Duy VÃµ Minh","userId":"02029714770423543928"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","\n","result = solution.magnificentSets(test_cases[2][\"input\"][\"n\"], test_cases[2][\"input\"][\"edges\"])\n","if result != test_cases[2][\"output\"]:\n","    print(f'Failed test case with input: {test_cases[2][\"input\"]} and output: {test_cases[2][\"output\"]} vs result: {result}')"],"metadata":{"id":"JHiykj3HGauZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739633915363,"user_tz":-420,"elapsed":319,"user":{"displayName":"Duy VÃµ Minh","userId":"02029714770423543928"}},"outputId":"3437f0b0-eaac-4453-b9dd-ce3a19cad940"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["group: {26: 1, 18: 2, 16: 2, 3: 2, 21: 2, 4: 2, 22: 3, 9: 3, 14: 3, 25: 3, 24: 3, 20: 3, 19: 3, 10: 3, 7: 3, 23: 3, 15: 3, 17: 3, 8: 3, 11: 3, 6: 3, 1: 3, 2: 3, 13: 3, 5: 3, 12: 3} \n"]}]},{"cell_type":"code","source":["class Solution:\n","    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:\n","\n","        node2node = defaultdict(list)\n","\n","        for edge in edges:\n","            node2node[edge[0]].append(edge[1])\n","            node2node[edge[1]].append(edge[0])\n","\n","        connected_components = self.find_connected_components(n, node2node)\n","\n","        \"\"\"\n","        for component in connected_components:\n","            print(component)\n","        \"\"\"\n","        max_num_group = 0\n","\n","\n","        for component in connected_components:\n","            if len(component) == 1:\n","                # print(f\"One element group: {component}\")\n","                max_num_group += 1\n","                continue\n","\n","            num_group = self.find_maximum_number_of_groups_in_component(component, node2node)\n","\n","            if num_group == -1:\n","                return num_group\n","\n","            max_num_group += num_group\n","\n","        return max_num_group\n","\n","    def _find_maximum_number_of_groups_in_component(self, source_node, node2node) -> int:\n","\n","        group = dict()\n","\n","        group[source_node] = 1\n","\n","        queue = deque([source_node])\n","\n","        while queue:\n","            node = queue.popleft()\n","\n","            for neighbor in node2node[node]:\n","                if neighbor in group:\n","                    if group[neighbor] == group[node]:\n","                        return -1\n","                    continue\n","\n","                group[neighbor] = group[node] + 1\n","                queue.append(neighbor)\n","\n","        # print(f\"group: {group} \")\n","\n","        return max(group.values())\n","\n","    def find_maximum_number_of_groups_in_component(self, component, node2node) -> int:\n","\n","        max_groups_num = 0\n","        max_group = None\n","\n","        for node in component:\n","            num_group = self._find_maximum_number_of_groups_in_component(node, node2node)\n","\n","            if num_group == -1:\n","                return num_group\n","\n","            max_groups_num = max(max_groups_num, num_group)\n","            \"\"\"\n","            if max_groups_num < num_group:\n","                max_groups_num = num_group\n","                max_group = group\n","            \"\"\"\n","        # print(f\"group: {max_group} \")\n","        # print(f\"max_groups_num: {max_groups_num}\")\n","        return max_groups_num\n","\n","    def find_connected_components(self, n, node2node) -> List[Set]:\n","        # find connected components\n","        connected_components = defaultdict(set)\n","\n","        processed_nodes = set()\n","\n","\n","        for i in range(1, n+1):\n","            if i in processed_nodes:\n","                continue\n","\n","            queue = [i]\n","\n","            connected_components[i].add(i)\n","\n","            while queue:\n","\n","                # print(f\"processed_nodes: {processed_nodes}\")\n","                # print(f\"queue: {queue}\")\n","                # print(f\"connected_component: {connected_components}\")\n","\n","                node = queue.pop()\n","\n","                if node in processed_nodes:\n","                    continue\n","\n","                processed_nodes.add(node)\n","\n","                for neighbor in node2node[node]:\n","                    if neighbor in processed_nodes:\n","                        continue\n","                    connected_components[i].add(neighbor)\n","                    queue.append(neighbor)\n","\n","        # print(f\"final connected_component: {connected_components}\")\n","\n","        return [ list(v) for v in connected_components.values() ]"],"metadata":{"id":"45yTuDhOL7_k","executionInfo":{"status":"ok","timestamp":1739635532331,"user_tz":-420,"elapsed":325,"user":{"displayName":"Duy VÃµ Minh","userId":"02029714770423543928"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","\n","test_case_num = 3\n","\n","result = solution.magnificentSets(test_cases[test_case_num][\"input\"][\"n\"], test_cases[test_case_num][\"input\"][\"edges\"])\n","if result != test_cases[test_case_num][\"output\"]:\n","    print(f'Failed test case with input: {test_cases[test_case_num][\"input\"]} and output: {test_cases[test_case_num][\"output\"]} vs result: {result}')"],"metadata":{"id":"fCXxQw8eQEGd","executionInfo":{"status":"ok","timestamp":1739635534281,"user_tz":-420,"elapsed":353,"user":{"displayName":"Duy VÃµ Minh","userId":"02029714770423543928"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"7GEn7DINQ6pT"},"execution_count":null,"outputs":[]}]}