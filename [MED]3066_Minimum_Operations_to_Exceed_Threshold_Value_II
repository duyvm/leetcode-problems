{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPDA44oaGwejdVww+EFhaRR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 3066. Minimum Operations to Exceed Threshold Value II\n","\n","https://leetcode.com/problems/minimum-operations-to-exceed-threshold-value-ii/description/\n","\n","You are given a **0-indexed** integer array `nums`, and an integer `k`.\n","\n","In one operation, you will:\n","\n","- Take the two smallest integers `x` and `y` in `nums`.\n","- Remove `x` and `y` from `nums`.\n","- Add `min(x, y) * 2 + max(x, y)` anywhere in the array.\n","\n","Note that you can only apply the described operation if `nums` contains at least two elements.\n","\n","Return the minimum number of operations needed so that all elements of the array are greater than or equal to `k`.\n","\n","**Constraints:**\n","- `2 <= nums.length <= 2 * 10`<sup>`5`</sup>\n","- `1 <= nums[i] <= 10`<sup>`9`</sup>\n","- `1 <= k <= 10`<sup>`9`</sup>\n","- The input is generated such that an answer always exists. That is, there exists some sequence of operations after which all elements of the array are greater than or equal to `k`."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input: `nums = [2,11,10,1,3], k = 10`\n","- Output: `2`\n","- Explanation: In the first operation, we remove elements `1` and `2`, then add `1 * 2 + 2` to `nums`. `nums` becomes equal to `[4, 11, 10, 3]`.\n","\n","  In the second operation, we remove elements `3` and `4`, then add `3 * 2 + 4` to `nums`. `nums` becomes equal to `[10, 11, 10]`.\n","\n","  At this stage, all the elements of nums are greater than or equal to `10` so we can stop.\n","\n","  It can be shown that `2` is the minimum number of operations needed so that all elements of the array are greater than or equal to `10`.\n","\n","**Example 2:**\n","\n","- Input: `nums = [1,1,2,4,9], k = 20`\n","- Output: `4`\n","- Explanation: After one operation, nums becomes equal to `[2, 4, 9, 3]`.\n","  \n","  After two operations, nums becomes equal to `[7, 4, 9]`.\n","\n","  After three operations, nums becomes equal to `[15, 9]`.\n","  \n","  After four operations, nums becomes equal to `[33]`.\n","  \n","  At this stage, all the elements of `nums` are greater than `20` so we can stop.\n","\n","  It can be shown that `4` is the minimum number of operations needed so that all elements of the array are greater than or equal to `20`."],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"nums\": [2,11,10,1,3],\n","            \"k\": 10\n","        },\n","        \"output\": 2\n","    },\n","    {\n","        \"input\": {\n","            \"nums\": [1,1,2,4,9],\n","            \"k\": 20\n","        },\n","        \"output\": 4\n","    },\n","]"],"metadata":{"id":"VD9YirfAdayx","executionInfo":{"status":"ok","timestamp":1739455515517,"user_tz":-420,"elapsed":657,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":["## Observations\n","\n","- Using min heap `heap` (or Priority Queue)\n","- while `heap.root` < `k` and `heap.size > 1`\n","  - `e1, e2 = heap.pop(), heap.pop()`\n","  - compute new `e`\n","  - `heap.add(e)`\n","  - `heap.refresh()`\n"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","from heapq import heapify, heappush, heappop\n","from queue import PriorityQueue\n","\n","class Solution:\n","    def minOperations(self, nums: List[int], k: int) -> int:\n","        heapify(nums)\n","\n","        operation_count = 0\n","\n","        while nums[0] < k:\n","            e1, e2 = heappop(nums), heappop(nums)\n","            e = e1 * 2 + e2\n","            heappush(nums, e)\n","            operation_count += 1\n","\n","        if nums[0] < k:\n","            return -1\n","\n","        return operation_count"],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1739455516720,"user_tz":-420,"elapsed":2,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.minOperations(test_case[\"input\"][\"nums\"], test_case[\"input\"][\"k\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"ok","timestamp":1739455517989,"user_tz":-420,"elapsed":3,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Qir_kqwqlfTs"},"execution_count":null,"outputs":[]}]}