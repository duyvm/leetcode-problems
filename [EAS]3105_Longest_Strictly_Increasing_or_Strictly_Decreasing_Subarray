{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMzlDk9+VyyvK58D/IXRE04"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 3105. Longest Strictly Increasing or Strictly Decreasing Subarray\n","\n","https://leetcode.com/problems/longest-strictly-increasing-or-strictly-decreasing-subarray/description\n","\n","You are given an array of integers `nums`. Return the length of the **longest subarray** of `nums` which is either **strictly increasing** or **strictly decreasing**\n","\n","**Constraints:**\n","- `1 <= nums.length <= 50`\n","- `1 <= nums[i] <= 50`"],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input: `nums = [1,4,3,3,2]`\n","- Output: `2`\n","- Explanation:\n","\n","  The strictly increasing subarrays of nums are `[1]`, `[2]`, `[3]`, `[3]`, `[4]`, and `[1,4]`.\n","\n","  The strictly decreasing subarrays of nums are `[1]`, `[2]`, `[3]`, `[3]`, `[4]`, `[3,2]`, and `[4,3]`.\n","\n","  Hence, we return `2`.\n","\n","**Example 2:**\n","\n","- Input: `nums = [3,2,1]`\n","- Output: `3`\n","- Explanation:\n","\n","  The strictly increasing subarrays of nums are `[3]`, `[2]`, and `[1]`.\n","\n","  The strictly decreasing subarrays of nums are `[3]`, `[2]`, `[1]`, `[3,2]`, `[2,1]`, and [3,2,1].\n","\n","  Hence, we return `3`.\n","\n","**Example 3:**\n","\n","- Input: `nums = [3,3,3,3]`\n","- Output: `1`\n","- Explanation:\n","\n","  The strictly increasing subarrays of nums are `[3]`, `[3]`, `[3]`, and `[3]`.\n","\n","  The strictly decreasing subarrays of nums are `[3]`, `[3]`, `[3]`, and `[3]`.\n","\n","  Hence, we return `1`."],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"markdown","source":["## Observations\n","\n","- Each element in `nums` is a stricly increasing/stricly decreasing array itself\n"," - Default answer is `1`\n","- One pass through the array, compare current element with its next element to check if it is increasing or decreasing\n","  - Keep track of increasing/decreasing array length\n","  - Do not consider equal case"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"nums\": [1,4,3,3,2]\n","        },\n","        \"output\": 2\n","    },\n","    {\n","        \"input\": {\n","            \"nums\": [3,2,1]\n","        },\n","        \"output\": 3\n","    },\n","    {\n","        \"input\": {\n","            \"nums\": [3,3,3,3]\n","        },\n","        \"output\": 1\n","    },\n","]"],"metadata":{"id":"wNzMYBytDXO7","executionInfo":{"status":"ok","timestamp":1738595051461,"user_tz":-420,"elapsed":1244,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","\n","class Solution:\n","    def longestMonotonicSubarray(self, nums: List[int]) -> int:\n","        ans = 1\n","\n","        increasing_length = 1\n","\n","        decreasing_length = 1\n","\n","        for i in range(1, len(nums)):\n","            if nums[i] < nums[i-1]:\n","                increasing_length = 1\n","                decreasing_length += 1\n","            elif nums[i] > nums[i-1]:\n","                decreasing_length = 1\n","                increasing_length += 1\n","            else:\n","                increasing_length = 1\n","                decreasing_length = 1\n","\n","            # print(i)\n","            # print(ans, increasing_length, decreasing_length)\n","            ans = max(ans, increasing_length, decreasing_length)\n","\n","        return ans"],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1738595476770,"user_tz":-420,"elapsed":394,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.longestMonotonicSubarray(test_case[\"input\"][\"nums\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"ok","timestamp":1738595477127,"user_tz":-420,"elapsed":3,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"9XZQR2FXW3RL"},"execution_count":null,"outputs":[]}]}