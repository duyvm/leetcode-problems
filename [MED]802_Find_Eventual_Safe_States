{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMlw3p20Q9501RcKs3APgD+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 802. Find Eventual Safe States\n","\n","https://leetcode.com/problems/find-eventual-safe-states/description/\n","\n","\n","There is a directed graph of `n` nodes with each node labeled from `0` to `n - 1`. The graph is represented by a **0-indexed** 2D integer array `graph` where `graph[i]` is an integer array of nodes adjacent to node `i`, meaning there is an edge from node `i` to each node in `graph[i]`.\n","\n","A node is a **terminal node** if there are no **outgoing edges**. A node is a **safe node** if every possible path starting from that node leads to a **terminal node** (or another **safe node**).\n","\n","Return an array containing all the **safe nodes** of the graph. The answer should be sorted in **ascending** order.\n","\n","**Constraints:**\n","\n","- `n == graph.length`\n","- `1 <= n <= 104`\n","- `0 <= graph[i].length <= n`\n","- `0 <= graph[i][j] <= n - 1`\n","- `graph[i]` is sorted in a strictly increasing order.\n","- The graph may contain self-loops.\n","- The number of edges in the graph will be in the range `[1, 4 * 104]`."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","![grid1](https://drive.google.com/uc?id=1OIb3Tyrgbrr1-NTJ6rULqXeHemGExAVF)\n","\n","- Input: `graph = [[1,2],[2,3],[5],[0],[5],[],[]]`\n","- Output: `[2, 4, 5, 6]`\n","- Explanation: The given graph is shown above.\n","  \n","  Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\n","  \n","  Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6..\n","\n","**Example 2:**\n","- Input: `graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]`\n","- Output: `[ 4 ]`\n","- Explanation: Only node 4 is a terminal node, and every path starting at node 4 leads to node 4."],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"markdown","source":["## Observations\n","\n","- Directed graph: `graph[i] = [a,b]` mean there are two edges start from `i` to `a` and `b`\n","- Terminal nodes i: `len(graph[i]) = 0`\n","- If a node has self-loop: not safe\n","- Create a reverse graph `re_graph` **2D-array** and `terminal_nodes`is array of terminal nodes\n"," - `re_graph[i] = [a,b]` mean that there are two edge start from `a` and `b` go to `i`\n","- For each node in `terminal_nodes`, find all possible safe node `pos_safe_nodes` using `re_graph`, other nodes is `unsafe_nodes`\n","- Let array `safe_nodes` contain all safe nodes\n","- For each node in `pos_safe_nodes`:\n","  - If all of its edges point to `terminal_nodes` and `safe_nodes`, add it to `safe_nodes`\n","  - If it have node in `unsafe_nodes`, add it to `unsafe_nodes`\n","  - Repeat until `safe_nodes`size is not change\n","- return `safe_nodes`\n","\n"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"graph\": [[1,2],[2,3],[5],[0],[5],[],[]]\n","        },\n","        \"output\": [2, 4, 5, 6]\n","    },\n","    {\n","        \"input\": {\n","            \"graph\": [[1,2,3,4],[1,2],[3,4],[0,4],[]],\n","        },\n","        \"output\": [4]\n","    },\n","    {\n","        \"input\": {\n","            \"graph\": [[],[0,2,3,4],[3],[4],[]],\n","        },\n","        \"output\": [0,1,2,3,4]\n","    },\n","]"],"metadata":{"id":"wNzMYBytDXO7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","\n","class Solution:\n","    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n","\n","        n = len(graph)\n","\n","        outDegree = [0] * n\n","\n","        # create reverse graph\n","        re_graph = [[] for _ in range(n)]\n","        for i in range(n):\n","            for node in graph[i]:\n","                re_graph[node].append(i)\n","                outDegree[i] += 1\n","\n","        # init queue\n","        q = deque()\n","        for i in range(n):\n","            if outDegree[i] == 0:\n","                q.append(i)\n","\n","        safe_node = []\n","\n","        while q:\n","            node = q.popleft()\n","            safe_node.append(node)\n","            for destination_node in re_graph[node]:\n","                outDegree[destination_node] -= 1\n","                if outDegree[destination_node] == 0:\n","                    q.append(destination_node)\n","\n","        return sorted(safe_node)"],"metadata":{"id":"7N6VBRdIDUwD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.eventualSafeNodes(test_case[\"input\"][\"graph\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v"},"execution_count":null,"outputs":[]}]}