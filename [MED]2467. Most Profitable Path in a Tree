{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMwWbVOt0iSChzIXCDRSSNS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 2467. Most Profitable Path in a Tree\n","\n","https://leetcode.com/problems/most-profitable-path-in-a-tree/description/\n","\n","There is an undirected tree with `n` nodes labeled from `0` to `n - 1`, rooted at node `0`. You are given a 2D integer array `edges` of length `n - 1` where `edges[i] = [a`<sub>`i`</sub>`, b`<sub>`i`</sub>`]` indicates that there is an edge between nodes `a`<sub>`i`</sub> and `b`<sub>`i`</sub> in the tree.\n","\n","At every node `i`, there is a gate. You are also given an array of even integers `amount`, where `amount[i]` represents:\n","\n","- the price needed to open the gate at node `i`, if `amount[i]` is negative, or,\n","- the cash reward obtained on opening the gate at node `i`, otherwise.\n","\n","The game goes on as follows:\n","\n","- Initially, Alice is at node `0` and Bob is at node `bob`.\n","- At every second, Alice and Bob each move to an adjacent node. Alice moves towards some leaf node, while Bob moves towards node `0`.\n","- For every node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that:\n","  - If the gate is already open, no price will be required, nor will there be any cash reward.\n","  - If Alice and Bob reach the node simultaneously, they share the price/reward for opening the gate there. In other words, if the price to open the gate is `c`, then both Alice and Bob pay `c / 2` each. Similarly, if the reward at the gate is `c`, both of them receive `c / 2` each.\n","- If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node `0`, he stops moving. Note that these events are **independent** of each other.\n","\n","Return the **maximum** net income Alice can have if she travels towards the optimal leaf node.\n","\n","**Constraints:**\n","- `2 <= n <= 10`<sup>`5`</sup>\n","- `edges.length == n - 1`\n","- `edges[i].length == 2`\n","- `0 <= a`<sub>`i`</sub>`, b`<sub>`i`</sub>` < n`\n","- `a`<sub>`i`</sub>` != b`<sub>`i`</sub>\n","- `edges` represents a valid tree.\n","- `1 <= bob < n`\n","- `amount.length == n`\n","- `amount[i]` is an even integer in the range `[-104, 104]`."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","![img1](https://drive.google.com/uc?id=1jmzrIhkZoqQoGA38znOSOWFJoiXlyPrB)\n","\n","- Input: `edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]`\n","\n","- Output: `6`\n","\n","- Explanation:\n","        The above diagram represents the given tree. The game goes as follows:\n","        - Alice is initially on node 0, Bob on node 3. They open the gates of their respective nodes.\n","        Alice's net income is now -2.\n","        - Both Alice and Bob move to node 1.\n","        Since they reach here simultaneously, they open the gate together and share the reward.\n","        Alice's net income becomes -2 + (4 / 2) = 0.\n","        - Alice moves on to node 3. Since Bob already opened its gate, Alice's income remains unchanged.\n","        Bob moves on to node 0, and stops moving.\n","        - Alice moves on to node 4 and opens the gate there. Her net income becomes 0 + 6 = 6.\n","        Now, neither Alice nor Bob can make any further moves, and the game ends.\n","        It is not possible for Alice to get a higher net income.\n","\n","\n","**Example 2:**\n","\n","![img1](https://drive.google.com/uc?id=1PnFeilvN8vLrhK_VQgyWqXniqo2_x2mP)\n","\n","- Input: `edges = [[0,1]], bob = 1, amount = [-7280,2350]`\n","\n","- Output: `-7280`\n","\n","- Explanation:\n","        Alice follows the path 0->1 whereas Bob follows the path 1->0.\n","        Thus, Alice opens the gate at node 0 only. Hence, her net income is -7280.\n",""],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"edges\": [[0,1],[1,2],[1,3],[3,4]],\n","            \"amount\": [-2,4,2,-4,6],\n","            \"bob\": 3\n","        },\n","        \"output\": 6\n","    },\n","    {\n","        \"input\": {\n","            \"edges\": [[0,2],[0,5],[1,3],[1,5],[2,4]],\n","            \"amount\": [5018,8388,6224,3466,3808,3456],\n","            \"bob\": 4\n","        },\n","        \"output\": 6\n","    },\n","]"],"metadata":{"id":"VD9YirfAdayx","executionInfo":{"status":"ok","timestamp":1740414509746,"user_tz":-420,"elapsed":71,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["### Observations\n","\n","- Because it is a tree, so there is no cycle.\n"," - A leaf is a node has only one edge connected to it, except root\n","- Create a mapping `edges` to `nodes`\n","- Root is `0`, ~~Bob move back to root so he will move from larger node to smaller node~~ node can have any number regarding its order in three\n","  - There is only one path for Bob\n","- Alice move to leaf, ~~so she will move from smaller node to larger node~~ node can have any number regarding its order in three\n","  - Can compute cost of all posible paths from leaf to root\n","    - Store the order of nodes\n","  - Store the most profiable path\n","  - For each path that overlaping with Bob's path, check\n","    - Nodes that have been opened by Bob\n","    - Nodes that Bob and Alice meet\n","\n","### Intuition\n","-"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["from typing import List, Optional\n","from collections import defaultdict\n","from collections import deque\n","from heapq import heapify, heappush, heappop\n","from queue import PriorityQueue\n","\n","class Solution:\n","    def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:\n","        n = len(amount)\n","        node2node = [ [] for _ in range(n) ]\n","        for edge in edges:\n","            node2node[edge[0]].append(edge[1])\n","            node2node[edge[1]].append(edge[0])\n","\n","        leaf_nodes = []\n","        for i, node in enumerate(node2node):\n","            if len(node) == 1 and i != 0:\n","                leaf_nodes.append(i)\n","\n","        print(leaf_nodes)\n","        \"\"\"\n","        # construct alice's paths\n","        alice_possible_paths = []\n","        for node in leaf_nodes:\n","            path = []\n","            path.append(node)\n","            while True:\n","                node = min(node2node[node])\n","                path.append(node)\n","                if node == 0:\n","                    break\n","            alice_possible_paths.append(path[::-1])\n","\n","        # construct bob path\n","        bob_path = []\n","        node = bob\n","        bob_path.append(node)\n","        while True:\n","            node = min(node2node[node])\n","            bob_path.append(node)\n","            if node == 0:\n","                break\n","\n","        max_profit = -float('inf')\n","        for path in alice_possible_paths:\n","            _amount = amount[::]\n","            _profit = 0\n","            for i in range(len(path)):\n","                a = path[i]\n","\n","                if i < len(bob_path):\n","                    b = bob_path[i]\n","                else:\n","                    b = None\n","\n","                if a == b:\n","                    _profit += _amount[a] // 2\n","                    continue\n","\n","                if b:\n","                    _amount[b] = 0\n","\n","                _profit += _amount[a]\n","\n","            max_profit = max(max_profit, _profit)\n","\n","        return max_profit\"\"\""],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1740414624728,"user_tz":-420,"elapsed":2,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.mostProfitablePath(test_case[\"input\"][\"edges\"], test_case[\"input\"][\"bob\"], test_case[\"input\"][\"amount\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"error","timestamp":1740414540364,"user_tz":-420,"elapsed":27684,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}},"colab":{"base_uri":"https://localhost:8080/","height":332},"outputId":"9a442838-2b1d-4541-9868-aa06d1910a76"},"execution_count":16,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-713a3f3d71b1>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0msolution\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSolution\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtest_case\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtest_cases\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msolution\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmostProfitablePath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_case\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"input\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"edges\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_case\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"input\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"bob\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_case\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"input\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"amount\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mtest_case\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"output\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-13-c032a9529227>\u001b[0m in \u001b[0;36mmostProfitablePath\u001b[0;34m(self, edges, bob, amount)\u001b[0m\n\u001b[1;32m     24\u001b[0m             \u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m                 \u001b[0mnode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode2node\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m                 \u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mnode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["solution = Solution()\n","test_case = 1\n","result = solution.mostProfitablePath(test_cases[test_case][\"input\"][\"edges\"], test_cases[test_case][\"input\"][\"bob\"], test_cases[test_case][\"input\"][\"amount\"])\n","if result != test_cases[test_case][\"output\"]:\n","    print(f'Failed test case with input: {test_cases[test_case][\"input\"]} and output: {test_cases[test_case][\"output\"]} vs result: {result}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zjut9PH8xNc1","executionInfo":{"status":"ok","timestamp":1740414635763,"user_tz":-420,"elapsed":8,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}},"outputId":"cd529af0-8537-4750-bedc-9e349fb1fe11"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 4]\n","Failed test case with input: {'edges': [[0, 2], [0, 5], [1, 3], [1, 5], [2, 4]], 'amount': [5018, 8388, 6224, 3466, 3808, 3456], 'bob': 4} and output: 6 vs result: None\n"]}]},{"cell_type":"code","source":["   0\n","  / \\\n"," 2   5\n"," |   |\n"," 4   1__3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"TmaH_o_YyyzF","executionInfo":{"status":"error","timestamp":1740414688482,"user_tz":-420,"elapsed":46,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}},"outputId":"cabaacba-86ac-4582-828d-fc5acd1e20af"},"execution_count":25,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"unexpected indent (<ipython-input-25-1183bac46966>, line 2)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-25-1183bac46966>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    (2, 5)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"UHoFB6KBzDkO","executionInfo":{"status":"ok","timestamp":1740414663290,"user_tz":-420,"elapsed":4,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":23,"outputs":[]}]}