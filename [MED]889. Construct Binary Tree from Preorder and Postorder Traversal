{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNj3XI3PTZBim+kcuJbu9M8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 889. Construct Binary Tree from Preorder and Postorder Traversal\n","\n","https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/description/\n","\n","Given two integer arrays, `preorder` and `postorder` where `preorder` is the preorder traversal of a binary tree of **distinct** values and `postorder` is the postorder traversal of the same tree, reconstruct and return the binary tree.\n","\n","If there exist multiple answers, you can return any of them.\n","\n","**Constraints:**\n","- `1 <= preorder.length <= 30`\n","- `1 <= preorder[i] <= preorder.length`\n","- All the values of `preorder` are unique.\n","- `postorder.length == preorder.length`\n","- `1 <= postorder[i] <= postorder.length`\n","- All the values of `postorder` are unique.\n","- It is guaranteed that `preorder` and `postorder` are the preorder traversal and postorder traversal of the same binary tree."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","![img1](https://drive.google.com/uc?id=10EtCxOZswtWLbLRymxb_CtUx6B6iOxpB)\n","\n","- Input: `preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]`\n","\n","- Output: `[1,2,3,4,5,6,7]`\n","\n","\n","**Example 2:**\n","\n","- Input: `preorder = [1], postorder = [1]`\n","\n","- Output: `[1]`"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"preorder\": [1,2,4,5,3,6,7],\n","            \"postorder\": [4,5,2,6,7,3,1]\n","        },\n","        \"output\": [1,2,3,4,5,6,7]\n","    },\n","    {\n","        \"input\": {\n","            \"preorder\": [1],\n","            \"postorder\": [1]\n","        },\n","        \"output\": [1]\n","    },\n","]"],"metadata":{"id":"VD9YirfAdayx","executionInfo":{"status":"ok","timestamp":1740284165764,"user_tz":-420,"elapsed":9,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["### Observations\n","\n","- Let `n = preorder.length = postorder.length`, tree height `h = log`<sub>`2`</sub>`(n)`\n","- Base cases where `n` in `[1,2,3]`\n","- From `h`, we can compute maxium nodes for each tree layer\n","- Preorder Traversal (Root → Left → Right)\n","  - Visit the root node.\n","  - Recursively traverse the left subtree.\n","  - Recursively traverse the right subtree.\n","  - How to determine current node is left/right node of previous node?\n","- Postorder Traversal (Left → Right → Root)\n","  - Recursively traverse the left subtree.\n","  - Recursively traverse the right subtree.\n","  - Visit the root node.\n","  - How to determine current node is right/parent node of previous node?\n","- Reverse of `postorder` is an alternative preorder (Root → Right → Left). Let it be `preorder_alt`\n","\n","### Intuition\n","- Compute `preorder_alt`\n","- Track visitted nodes by using an array `visitted` of length `n+1`\n","- Let `result` is the return array\n","- Compute `node2index` for both `preorder` and `preorder_alt`\n","- Given `queue` starting from root `preorder[0]`, while `queue` is not empty:\n"," - Get `node` from `queue`\n"," - If `process[node]` is `true`, continue\n"," - Get `left_child`, `right_child` from `preorder` and `preorder_alt` and add it to queue\n"," - Add `left_child`, `right_child` to `result`\n"," - Set `processed[left_child]`, `processed[right_child]` to `true`"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["from typing import List, Optional\n","from collections import defaultdict\n","from collections import deque\n","from heapq import heapify, heappush, heappop\n","from queue import PriorityQueue\n","\n","# Definition for a binary tree node.\n","class TreeNode:\n","     def __init__(self, val=0, left=None, right=None):\n","         self.val = val\n","         self.left = left\n","         self.right = right\n","\n","class Solution:\n","    def constructFromPrePost(self, preorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n","        n = len(preorder)\n","        preorder_alt = postorder[::-1]\n","\n","        node2index = [-1] * (n+1)\n","        for i, node in enumerate(preorder):\n","            node2index[node] = i\n","\n","        node2index_alt = [-1] * (n+1)\n","        for i, node in enumerate(preorder_alt):\n","            node2index_alt[node] = i\n","\n","        processed = [False] * (n+1)\n","\n","        processed[preorder[0]] = True\n","\n","        root = TreeNode(preorder[0])\n","\n","        queue = deque([root])\n","\n","        while queue:\n","            node = queue.popleft()\n","\n","            if (node2index[node.val]+1) < n and not processed[preorder[node2index[node.val]+1]]:\n","                left_child_node = TreeNode(preorder[node2index[node.val]+1])\n","                node.left = left_child_node\n","                queue.append(left_child_node)\n","                processed[preorder[node2index[node.val]+1]] = True\n","\n","            if (node2index_alt[node.val]+1) < n and not processed[preorder_alt[node2index_alt[node.val]+1]]:\n","                right_child_node = TreeNode(preorder_alt[node2index_alt[node.val]+1])\n","                node.right = right_child_node\n","                queue.append(right_child_node)\n","                processed[preorder_alt[node2index_alt[node.val]+1]] = True\n","\n","        return root"],"metadata":{"id":"7N6VBRdIDUwD","executionInfo":{"status":"ok","timestamp":1740284997309,"user_tz":-420,"elapsed":6,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.constructFromPrePost(test_case[\"input\"][\"preorder\"], test_case[\"input\"][\"postorder\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"ok","timestamp":1740284997509,"user_tz":-420,"elapsed":4,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1f595dad-0da0-4a1a-8069-230e69c32220"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Failed test case with input: {'preorder': [1, 2, 4, 5, 3, 6, 7], 'postorder': [4, 5, 2, 6, 7, 3, 1]} and output: [1, 2, 3, 4, 5, 6, 7] vs result: <__main__.TreeNode object at 0x7b3347c30d90>\n","Failed test case with input: {'preorder': [1], 'postorder': [1]} and output: [1] vs result: <__main__.TreeNode object at 0x7b3347c30bd0>\n"]}]}]}