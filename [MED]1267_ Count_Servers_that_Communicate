{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNrVdIjyi6/oukiNGds905j"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1267. Count Servers that Communicate\n","\n","https://leetcode.com/problems/count-servers-that-communicate/description/\n","\n","You are given a map of a server center, represented as a `m * n` integer matrix grid, where `1` means that on that cell there is a server and `0` means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.\n","\n","Return the number of servers that communicate with any other server.\n","\n","**Constraints:**\n","\n","- `m == grid.length`\n","- `n == grid[i].length`\n","- `1 <= m <= 250`\n","- `1 <= n <= 250`\n","- `grid[i][j] == 0 or 1`"],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","![grid1](https://drive.google.com/uc?id=1EryqA9k5kxyaJC4MamTayLO93BWO6UKh)\n","\n","- Input: `grid = [[1,0],[0,1]]`\n","- Output: `0`\n","- Explanation: No servers can communicate with others..\n","\n","**Example 2:**\n","\n","![grid2](https://drive.usercontent.google.com/download?id=18QkjwXNoDb3-L3CSL42TOVQxKePGbSYI)\n","\n","- Input: `grid = [[1,0],[1,1]]`\n","- Output: `3`\n","- Explanation: All three servers can communicate with at least one other server.\n","\n","**Example 3:**\n","\n","![grid2](https://drive.usercontent.google.com/download?id=1T9TCQZMMeVHiYp6yTOWDsSlJgaLlYb5E)\n","\n","- Input: `grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]`\n","- Output: `4`\n","- Explanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server."],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"markdown","source":["## Observations\n","\n","- Array `col_arr`, has length `n`, is used to store row indexes of cells are server on each column.\n","- Array `row_arr`, has length `m`, is used to store row indexes of cells are server on each row.\n"," - Iterate over all cells, start from `(0,0)`, if cell `grid[i,j] = 1` then stores add `i` in `col_arr[j]` and `j` in `row_arr[i]`\n","\n","- Find connected server in `col_arr` and `row_arr`\n","- Let set `connected_cells` to store communicated servers\n"," - For each row `i` in `row_arr`\n","   - If `row_arr[i]` is empty or has one element, continue\n","   - Else for each col index `j` in `row_arr[i]`, add `(i,j)` into `connected_cells`\n"," - Do the same for each column `j` in `col_arr`\n"," - Return number of element in `connected_cells`\n","\n"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"grid\": [[1,0],[0,1]]\n","        },\n","        \"output\": 0\n","    },\n","    {\n","        \"input\": {\n","            \"grid\": [[1,0],[1,1]]\n","        },\n","        \"output\": 3\n","    },\n","    {\n","        \"input\": {\n","            \"grid\": [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\n","        },\n","        \"output\": 4\n","    },\n","]"],"metadata":{"id":"wNzMYBytDXO7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","\n","class Solution:\n","    def countServers(self, grid: List[List[int]]) -> int:\n","        m, n = len(grid), len(grid[0])\n","        connected_cells = set()\n","        row_arr = defaultdict(list)\n","        col_arr = defaultdict(list)\n","\n","        for i in range(m):\n","            for j in range(n):\n","                if grid[i][j] == 1:\n","                    row_arr[i].append(j)\n","                    col_arr[j].append(i)\n","\n","        for row, cols in row_arr.items():\n","            if len(cols) > 1:\n","                for col in cols:\n","                    connected_cells.add((row, col))\n","\n","        for col, rows in col_arr.items():\n","            if len(rows) > 1:\n","                for row in rows:\n","                    connected_cells.add((row, col))\n","\n","        return len(connected_cells)"],"metadata":{"id":"7N6VBRdIDUwD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.countServers(test_case[\"input\"][\"grid\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v"},"execution_count":null,"outputs":[]}]}