{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1zQ_mX202O3PRhsGz4v-eCXoTVLuyOA_l","timestamp":1738602177133}],"authorship_tag":"ABX9TyNeTX9aelcla/IugJMsp7AE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1368. Minimum Cost to Make at Least One Valid Path in a Grid\n","\n","https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/description/\n","\n","Given an `m x n` grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of `grid[i][j]` can be:\n","\n","- `1` which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`)\n","- `2` which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`)\n","- `3` which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`)\n","- `4` which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`)\n","\n","Notice that there could be some signs on the cells of the grid that point outside the grid.\n","\n","You will initially start at the upper left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)` following the signs on the grid. The valid path does not have to be the shortest.\n","\n","You can modify the sign on a cell with `cost = 1`. You can modify the sign on a cell one time only.\n","\n","Return the minimum cost to make the grid have at least one valid path.\n","\n","**Constraints:**\n","\n","- `m == grid.length`\n","- `n == grid[i].length`\n","- `1 <= m, n <= 100`\n","- `1 <= grid[i][j] <= 4`"],"metadata":{"id":"ASeqIXk-oVgr"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","![grid1](https://drive.google.com/uc?id=1Cd2N9GPpfz1GjRif0nv1KsZpL33YoT38)\n","\n","- Input: `grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]`\n","- Output: `3`\n","- Explanation: You will start at point `(0, 0)`.\n","  \n","  The path to `(3, 3)` is as follows.\n","  \n","  `(0, 0) --> (0, 1) --> (0, 2) --> (0, 3)` change the arrow to down with `cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0)` change the arrow to down with `cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3)` change the arrow to down with `cost = 1 --> (3, 3)`\n","  \n","  The total `cost = 3`.\n","\n","**Example 2:**\n","\n","\n","![grid2](https://drive.usercontent.google.com/download?id=12cY1CwjatejLcIZ-VvPv0DifQ0ZB9XP-)\n","\n","- Input: `grid = [[1,1,3],[3,2,2],[1,1,4]]`\n","- Output: `0`\n","- Explanation: You can follow the path from `(0, 0)` to `(2, 2)`.\n","\n","**Example 3:**\n","\n","![grid3](https://drive.usercontent.google.com/download?id=1aHXZ2EW60tKscLwyoL_ZsZH2j-eo0fIx)\n","\n","- Input: `grid = [[1,2],[4,3]]`\n","- Output: `1`"],"metadata":{"id":"wKhOVcAnehIR"}},{"cell_type":"markdown","source":["## Observations\n","\n","- Use 0-1 BFS to solve this problem\n","- Use dequeue to store cell that will be processed in future.\n","- Use an `m x n` `minCostGrid` to keep track of cost to move from `0,0` to all other cells. Initialize `minCostGrid` with maximum cost `m*n+1`, `minCostGrid[0][0]=0`\n","- Starting from position `(0,0)`,at each cell `(i,j)`, calculate the cost of its neighbor cells by `minCostGrid[i][j] + costOfChangeSign`. `costOfChangeSign` is `0` if matches sign else `1`. Compare the calculated cost with neighbor cell's current cost, update if calculated cost is smaller and add the cell into the queue. In this way, we only re-process the cell if its `minCost` is changed.\n","- If it matches the sign, cost is `0` and we add it to front of queue, otherwise cost is `1` and we add it to back of queue for processing later.\n","- In this way, we prioritize processing the cell wil `0` cost first\n","- After processing all the cell, return `minCostGrid[m-1][n-1]`"],"metadata":{"id":"G99vLU1ZqMbU"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"grid\": [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]],\n","        },\n","        \"output\": 3\n","    },\n","    {\n","        \"input\": {\n","            \"grid\": [[1,2],[4,3]],\n","        },\n","        \"output\": 1\n","    },\n","    {\n","        \"input\": {\n","            \"grid\": [[1,1,3],[3,2,2],[1,1,4]],\n","        },\n","        \"output\": 0\n","    },\n","    {\n","        \"input\": {\n","            \"grid\": [[2,2,2],[2,2,2]],\n","        },\n","        \"output\": 3\n","    },\n","]"],"metadata":{"id":"5zKoX0sxsFJG","executionInfo":{"status":"ok","timestamp":1738601033183,"user_tz":-420,"elapsed":347,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","from collections import deque\n","\n","class Solution:\n","    def minCost(self, grid: List[List[int]]) -> int:\n","\n","        neighbor_cells_delta = [(0,1),(0,-1),(1,0),(-1,0)]\n","\n","        m, n = len(grid), len(grid[0])\n","\n","        minCostGrid = [[m*n+1 for _ in range(n)] for _ in range(m)]\n","\n","        minCostGrid[0][0] = 0\n","\n","        queue = deque([(0,0)])\n","\n","        #processed_cell = set()\n","\n","        while queue:\n","            i, j = queue.popleft()\n","\n","            #if (i,j) in processed_cell:\n","             #   continue\n","\n","            #processed_cell.add((i,j))\n","\n","            for k in range(4):\n","                ni, nj = i + neighbor_cells_delta[k][0], j + neighbor_cells_delta[k][1]\n","\n","                if ni < 0 or ni >= m or nj < 0 or nj >= n:\n","                    continue\n","\n","                costOfChangeSign = 0 if grid[i][j] == k + 1 else 1\n","\n","                costNextCell = minCostGrid[i][j] + costOfChangeSign\n","\n","                if costNextCell >= minCostGrid[ni][nj]:\n","                    continue\n","\n","                if costOfChangeSign == 0:\n","                    queue.appendleft((ni,nj))\n","                else:\n","                    queue.append((ni,nj))\n","\n","                minCostGrid[ni][nj] = costNextCell\n","\n","        return minCostGrid[m-1][n-1]"],"metadata":{"id":"fnOHwzAmpR1d","executionInfo":{"status":"ok","timestamp":1738601950764,"user_tz":-420,"elapsed":1304,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.minCost(test_case[\"input\"][\"grid\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"VrV9COiQuCV7","executionInfo":{"status":"ok","timestamp":1738601950764,"user_tz":-420,"elapsed":2,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XOYMMjpVvWnE"},"execution_count":null,"outputs":[]}]}