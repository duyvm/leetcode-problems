{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNhsQN6EIhBX/rqYdeTQtv8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 710. Random Pick with Blacklist\n","\n","https://leetcode.com/problems/random-pick-with-blacklist/description/\n","\n","You are given an integer `n` and an array of **unique** integers `blacklist`. Design an algorithm to pick a random integer in the range `[0, n - 1]` that is not in `blacklist`. Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.\n","\n","Optimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.\n","\n","Implement the Solution class:\n","\n","- `Solution(int n, int[] blacklist)` Initializes the object with the integer `n` and the blacklisted integers `blacklist`.\n","\n","- `int pick()` Returns a random integer in the range `[0, n - 1]` and not in blacklist.\n","\n","\n","**Constraints:**\n","- `1 <= n <= 10`<sup>`9`</sup>\n","- `0 <= blacklist.length <= min(10`<sup>`5`</sup>`, n - 1)`\n","- `0 <= blacklist[i] < n`\n","- All the values of blacklist are **unique**.\n","- At most `2 * 10`<sup>`4`</sup> calls will be made to pick."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","- Input:\n","\n","        [\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n","        [[7, [2, 3, 5]], [], [], [], [], [], [], []]\n","\n","- Output:\n","\n","        [null, 0, 4, 1, 6, 1, 0, 4]\n","\n","- Explanation:\n","\n","        Solution solution = new Solution(7, [2, 3, 5]);\n","        solution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n","                         // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\n","        solution.pick(); // return 4\n","        solution.pick(); // return 1\n","        solution.pick(); // return 6\n","        solution.pick(); // return 1\n","        solution.pick(); // return 0\n","        solution.pick(); // return 4"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"code","source":["test_cases = [\n","]"],"metadata":{"id":"VD9YirfAdayx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Observations\n","\n","- all elements in `nums` are unique\n","- convert `nums` to set for faster checking existence\n","- use binary or integer ?\n","\n","### Intuition\n","\n","- convert all binary to integer and add to a set `nums_set`\n","- maximum will be `max = 2`<sup>`0`</sup>` + 2`<sup>`1`</sup> `+ 2`<sup>`n-1`</sup>`+ ... + 2`<sup>`n`</sup>\n","- for `i` from `0` to `max`\n","  - if `i` no in `nums_set` return binary string of `i`"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","from heapq import heapify, heappush, heappop\n","from queue import PriorityQueue\n","\n","class Solution:\n","    def findDifferentBinaryString(self, nums: List[str]) -> str:\n","        nums_set = set()\n","        for s in nums:\n","            nums_set.add(int(s, 2))\n","\n","\n","        max = 2**len(nums)\n","        for i in range(max):\n","            if i not in nums_set:\n","                return bin(i)[2:].zfill(len(nums))"],"metadata":{"id":"7N6VBRdIDUwD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.numTilePossibilities(test_case[\"input\"][\"tiles\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v","executionInfo":{"status":"ok","timestamp":1739809380234,"user_tz":-420,"elapsed":3,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"db8e245b-73e6-473b-94f5-7a24504815cd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Failed test case with input: {'tiles': 'AAB'} and output: 8 vs result: 10\n","Failed test case with input: {'tiles': 'AAABBC'} and output: 188 vs result: 444\n","Failed test case with input: {'tiles': 'AACC'} and output: 18 vs result: 22\n"]}]},{"cell_type":"code","source":["solution = Solution()\n","test_case = 4\n","\n","\n","result = solution.numTilePossibilities(test_cases[test_case][\"input\"][\"tiles\"], True)\n","if result != test_cases[test_case][\"output\"]:\n","    print(f'Failed test case with input: {test_cases[test_case][\"input\"]} and output: {test_cases[test_case][\"output\"]} vs result: {result}')"],"metadata":{"id":"OXlb9FlT1dfy","executionInfo":{"status":"ok","timestamp":1739808938033,"user_tz":-420,"elapsed":329,"user":{"displayName":"Duy Võ Minh","userId":"02029714770423543928"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"88f4fcd9-405f-4c3c-9c63-073a0bb8bba0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tiles: AACC, duplicated_char_count: 2\n","duplicated_char_count: 2, max_num_of_sequences: 4, total_char: 4, target_length: 1\n","result original: 4\n","i: 0, _duplicated_char_count: 2, result: 2\n","result: 2\n","num_of_sequences[1]: 12\n","duplicated_char_count: 2, max_num_of_sequences: 12, total_char: 4, target_length: 2\n","result original: 12\n","i: 0, _duplicated_char_count: 2, result: 6\n","i: 1, _duplicated_char_count: 1, result: 4\n","result: 4\n","num_of_sequences[2]: 24\n","duplicated_char_count: 2, max_num_of_sequences: 24, total_char: 4, target_length: 3\n","result original: 24\n","i: 0, _duplicated_char_count: 2, result: 12\n","i: 1, _duplicated_char_count: 1, result: 8\n","i: 2, _duplicated_char_count: 0, result: 8\n","result: 8\n","num_of_sequences[3]: 24\n","duplicated_char_count: 2, max_num_of_sequences: 24, total_char: 4, target_length: 4\n","result original: 24\n","i: 0, _duplicated_char_count: 2, result: 12\n","i: 1, _duplicated_char_count: 1, result: 8\n","i: 2, _duplicated_char_count: 0, result: 8\n","result: 8\n","Failed test case with input: {'tiles': 'AACC'} and output: 18 vs result: 22\n"]}]},{"cell_type":"code","source":["from os import access\n","from urllib.request import AbstractBasicAuthHandler\n","aab\n","\n","aa\n","ab\n","aa\n","ab\n","ba\n","ba\n","\n","remove one duplicate\n","remove one set duplicate\n","\n","aab\n","abc\n","baa\n","\n","\n","4*3*2*1=24\n","\n","=> 4 set = 24/4=6\n","\n","=> remove 2 set = 12\n","\n","=> in each set continue remove two smaller set\n","\n","=> 12/2 = 6\n","\n","\n","\n","aacc\n","aacc\n","acac\n","acca\n","acac\n","acca\n","\n","24\n","\n","aaaa\n","\n","24/n\n","24 - 24/n * num duplicate pair = 6\n","6 - 6/(n-1) * num duplicate pair-1 = 2\n","2 - 2/(n-2) * num duplicate pair-2 = 1\n","\n","-> final answer 1\n","\n","aab\n","6/3\n","total_set = 3\n","permutation each set = 6/3\n","\n","duplicate_set = 1\n","\n","-> valid set = 6/2\n","\n","6 - 6/3 * 1 = 4\n","\n","\n","2 - 2/2 * 1 = 1\n","\n","\n","aab\n","aba\n","\n","aab\n","aba\n","\n","baa\n","baa\n","\n","4/n=1\n","\n","4 - (4/4 * 3) = 1\n","\n","case 2 (12)\n","\n","12/4 = 3\n","\n","12 - (12/4*3) = 3\n","3 - 3/3 * 2 = 1\n","\n","\n","aacc\n","num_duplicate_pair = 2\n","\n","case 1\n","4/4\n","4 - 4/4 * 2 = 2\n","\n","case 2\n","12/4\n","12 - 12/4 * 2 = 6\n","6 - 6/3 * 1 = 4\n","\n","case 3\n","\n","24/4\n","24 - 24/4 * 2 = 12\n","12 - 12/3 * 1 = 8\n","8 - /2 * 0 = 8\n","\n","total_set = 4\n","permutation_each_set = n/total_set = 6\n","duplicate = 2\n","-> un duplicate set = 2\n","\n","6 - 6/2 * 1 = 3 + 3\n","\n","aac\n","aca\n","cac\n","cca\n","caa\n","acc\n","\n","\n","aaaa\n","total_set = 4\n","permutation_each_set = n/total_set = 6\n","duplicate = 3\n","-> un duplicate set = 1\n","\n","6 - 6/3 * 2 = 2\n","2 - 2/2*1 = 1\n","1 - 1/1*0=0\n","\n","\n","aaccc\n","n = 5\n","dup = 3\n","\n","total_per 5*4*3 = 60\n","set = 5\n","per per set = 60/5 = 12\n","\n","dup = 3\n","undup = 2\n","-> 2 un dup = 24\n","for each undup:\n","    for lenght - 1\n","        per = 12 - 12/4 * 3 = 3\n","        per = 3 - 3/3 * 2 = 1\n","\n","-> anser 12 + 1 + 1 = 14\n","\n","aac\n","aca\n","acc\n","\n","ccc\n","caa\n","cac\n","cca"],"metadata":{"id":"OZe4-Q7LPVmv"},"execution_count":null,"outputs":[]}]}