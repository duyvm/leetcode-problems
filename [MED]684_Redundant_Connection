{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPOUezifLglFsjKfOBKC485"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 684. Redundant Connection\n","\n","https://leetcode.com/problems/redundant-connection/description/\n","\n","In this problem, a tree is an **undirected** graph that is connected and has no cycles.\n","\n","You are given a graph that started as a tree with `n` nodes labeled from `1` to `n`, with one additional edge added. The added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed. The graph is represented as an array `edges` of length `n` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the graph.\n","\n","Return an edge that can be removed so that the resulting graph is a tree of `n` nodes. If there are multiple answers, return the answer that occurs last in the input.\n","\n","**Constraints:**\n","- `n == edges.length`\n","- `3 <= n <= 1000`\n","- `edges[i].length == 2`\n","- `1 <= ai < bi <= edges.length`\n","- `ai != bi`\n","- There are no repeated edges.\n","- The given graph is connected."],"metadata":{"id":"OhbFjTlo_zih"}},{"cell_type":"markdown","source":["**Example 1:**\n","\n","![grid1](https://drive.google.com/uc?id=1qDkooFZYAi2SpXAOk7ZeEeCXbg3Sg4ru)\n","\n","- Input: `edges = [[1,2],[1,3],[2,3]]`\n","- Output: `[2,3]`\n","\n","**Example 2:**\n","\n","![grid2](https://drive.google.com/uc?id=1iSev3tBxoWgfzWCXq5aq64nU-B64n7jf)\n","\n","- Input: `edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]`\n","- Output: `[1,4]`"],"metadata":{"id":"IEpVafbfC7W-"}},{"cell_type":"markdown","source":["## Observations\n","\n","- The tree has no cycle.\n","- The tree has `n` nodes, then if all nodes are connected and no cycle, there will be `n-1` edges.\n","- The added edge will form a cycle in tree.\n","- Find the cycle. The added edge is one of the edges in the cycle. Return the occur last in input.\n","- Terminal nodes are nodes that have only one edge\n"," - If we remove all the terminal nodes, only the cycle nodes left\n"," - Count the number of edges connect to each node, iterately remove terminal nodes until only cycle nodes left.\n"," - After we remove all the terminal nodes, we have only cycle nodes. We traverse the `edges` in reverse and return the first edge that have both nodes in the cycle nodes.\n"],"metadata":{"id":"e4M1bpIEDWc6"}},{"cell_type":"code","source":["test_cases = [\n","    {\n","        \"input\": {\n","            \"edges\": [[1,2],[1,3],[2,3]]\n","        },\n","        \"output\": [2,3]\n","    },\n","    {\n","        \"input\": {\n","            \"edges\": [[1,2],[2,3],[3,4],[1,4],[1,5]]\n","        },\n","        \"output\": [1,4]\n","    },\n","]"],"metadata":{"id":"wNzMYBytDXO7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","from collections import defaultdict\n","from collections import deque\n","\n","class Solution:\n","    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n","\n","        n = len(edges)\n","\n","        ans = []\n","\n","        node_map = defaultdict(set)\n","\n","        node_fre = defaultdict(int)\n","\n","        for i in range(n):\n","            a,b = edges[i]\n","            node_map[a].add(b)\n","            node_map[b].add(a)\n","            node_fre[a] += 1\n","            node_fre[b] += 1\n","\n","        q = deque()\n","\n","        for node, fre in node_fre.items():\n","            if fre == 1:\n","                q.append(node)\n","\n","        while q:\n","            source_node = q.pop()\n","            node_fre[source_node] -= 1\n","            for destination_node in node_map[source_node]:\n","                node_fre[destination_node] -= 1\n","                if node_fre[destination_node] == 1:\n","                    q.append(destination_node)\n","\n","        for edge in reversed(edges):\n","            if node_fre[edge[0]] > 1 and node_fre[edge[1]] > 1:\n","                return edge"],"metadata":{"id":"7N6VBRdIDUwD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solution = Solution()\n","for test_case in test_cases:\n","    result = solution.findRedundantConnection(test_case[\"input\"][\"edges\"])\n","    if result != test_case[\"output\"]:\n","        print(f'Failed test case with input: {test_case[\"input\"]} and output: {test_case[\"output\"]} vs result: {result}')"],"metadata":{"id":"CMDKnxwjGL6v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ptz87InoLH62"},"execution_count":null,"outputs":[]}]}